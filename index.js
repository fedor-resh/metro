
//
// List coords in degrees of Moscow Metro lines and stations
//  [[ftype, ftag, coords, label, centerof, ismap],...]
// 'Q' and 'L' literals implements the bezierCurveTo (...) method
// egax@bk.ru, 2013-23.
//
export var MLNS = [['mkad', 'mkad', [[-83, 148, 'Q'], [-85, 148, ''], [-87, 146, 'L'], [-175, 53, 'Q'], [-177, 51, ''], [-177, 49, 'L'], [-177, -2, 'Q'], [-177, -4, ''], [-175, -6, 'L'], [-129, -55, 'Q'], [-127, -57, ''], [-127, -59, 'L'], [-127, -107, 'Q'], [-127, -109, ''], [-125, -111, 'L'], [-61, -168, 'Q'], [-59, -170, ''], [-57, -170, 'L'], [100, -170, 'Q'], [102, -170, ''], [104, -168, 'L'], [109, -162, 'Q'], [111, -160, ''], [111, -158, 'L'], [111, -125, 'Q'], [111, -123, ''], [113, -121, 'L'], [126, -104, 'Q'], [128, -102, ''], [130, -102, 'L'], [158, -102, 'Q'], [160, -102, ''], [162, -100, 'L'], [164, -98, 'Q'], [166, -96, ''], [166, -94, 'L'], [166, -28, 'Q'], [166, -26, ''], [164, -24, 'L'], [130, 3, 'Q'], [128, 5, ''], [128, 7, 'L'], [128, 30, 'Q'], [128, 32, ''], [130, 34, 'L'], [151, 53, 'Q'], [153, 55, ''], [153, 57, 'L'], [153, 73, 'Q'], [153, 75, ''], [151, 77, 'L'], [115, 106, 'Q'], [113, 108, ''], [111, 108, 'L'], [65, 108, 'Q'], [63, 108, ''], [61, 110, 'L'], [20, 146, 'Q'], [18, 148, ''], [16, 148, 'L'], [-83, 148]]], ['moskvar', 'mr', [[-175, 78], [-119, 78, 'Q'], [-110, 78, ''], [-110, 71.5, 'L'], [-110, 71.5, 'Q'], [-110, 65, ''], [-119, 65, 'L'], [-135, 65, 'Q'], [-144, 65, ''], [-144, 61, 'L'], [-144, 61, 'Q'], [-144, 57, ''], [-135, 57, 'L'], [-116, 57, 'Q'], [-113, 57, ''], [-113, 52, 'L'], [-113, 52, 'Q'], [-113, 47, ''], [-116, 47, 'L'], [-144, 47, 'Q'], [-150, 47, ''], [-150, 39.5, 'L'], [-150, 39.5, 'Q'], [-150, 32, ''], [-144, 32, 'L'], [-129, 32, 'Q'], [-120, 32, ''], [-120, 28, 'L'], [-120, 12, 'Q'], [-120, 8, ''], [-116, 6, 'L'], [-67, 6, 'Q'], [-59, 6, ''], [-59, -2, 'L'], [-59, -31, 'Q'], [-59, -38, ''], [-63, -41, 'L'], [-96, -73, 'Q'], [-109, -85, ''], [-98, -93, 'L'], [-98, -93, 'Q'], [-90, -99, ''], [-81, -90, 'L'], [-14, -24, 'Q'], [-10, -20, ''], [-5, -20, 'L'], [19, -20, 'Q'], [25, -20, ''], [28, -24, 'L'], [52, -47, 'Q'], [55, -51, ''], [55, -57, 'L'], [55, -105, 'Q'], [55, -109, ''], [65, -109, 'L'], [79, -109, 'Q'], [85, -109, ''], [85, -115, 'L'], [85, -115, 'Q'], [85, -117, ''], [80, -120.5, 'L'], [80, -120.5, 'Q'], [74, -124, ''], [74, -130, 'L'], [74, -131, 'Q'], [74, -141, ''], [84, -141, 'L'], [102, -141, 'Q'], [106, -141, ''], [111, -147, 'L'], [133, -172]]], ['moskvac', 'mc', [[-113, 52, 'Q'], [-112, 73, ''], [-100, 80, 'L'], [-100, 80, 'Q'], [-97, 82, ''], [-97, 86, 'L'], [-97, 152]]], ['strogino', 'sl', [[-138, 65], [-130, 71, 'Q'], [-127, 74, ''], [-124, 74, 'L'], [-119, 74, 'Q'], [-117, 74, ''], [-117, 72, 'L'], [-117, 72, 'Q'], [-117, 69, ''], [-119, 69, 'L'], [-129, 69, 'Q'], [-133, 69, ''], [-138, 65, '']]], ['vodootvod', 'vc', [[-30, -40], [-27, -40, 'Q'], [-24, -40, ''], [-21, -38, 'L'], [-13, -30, 'Q'], [-9, -27, ''], [-7, -27, 'L'], [18, -27, 'Q'], [24, -27, ''], [27, -31, 'L'], [55, -59]]], ['yauza', 'yr', [[31, -27], [65, -27, 'Q'], [73, -27, ''], [75, -15, 'L'], [83, 61, 'Q'], [83, 66, ''], [79, 70, 'L'], [50, 99, 'Q'], [46, 103, ''], [36, 103, 'L'], [36, 103, 'Q'], [20, 108, ''], [32, 120, 'L'], [58, 147]]], ['nagatino', 'np', [[58, -108], [66.8, -100.3, 'Q'], [69, -98, ''], [71.5, -98, 'L'], [72.5, -98, 'Q'], [74.7, -98, ''], [77, -100, 'L'], [83, -106, 'Q'], [85, -108, ''], [85, -116]]], ['grebnoy', 'gc', [[-138, 51], [-127, 53], [-122, 53], [-132, 51], [-138, 51]]], ['r1', 'r1', [[80, 80], [89.3, 72.3], [38, 21, 'Q'], [36, 19, ''], [34, 19, 'L'], [20, 19, 'Q'], [17, 19, ''], [14, 17, 'L'], [-100, -97], [-128, -126, 'Q'], [-130, -128, ''], [-130, -130, 'L'], [-130, -156]]], ['r1_ext', 'r1', [[-130, -156, 'Q'], [-130, -160, ''], [-118, -172, '']]], ['r2', 'r2', [[-92, 123], [-92, 107, 'Q'], [-92, 102, ''], [-90, 100, 'L'], [-34, 45, 'Q'], [-31, 42, ''], [-31, 38, 'L'], [-31, 31, 'Q'], [-31, 27, ''], [-29, 24, 'L'], [20, -24, 'Q'], [23, -27, ''], [23, -31, 'L'], [23.10, -33.98, 'Q'], [23, -36, ''], [26, -39, 'L'], [65, -78, 'Q'], [68, -81, ''], [68, -85, 'L'], [68, -143, 'Q'], [68, -146, ''], [71, -149, 'L'], [81, -160], [95, -160]]], ['r3', 'r3', [[-159, 100], [-159, 18, 'Q'], [-159, 15, ''], [-156, 12, 'L'], [-130, -14, 'Q'], [-128, -16, ''], [-124, -16, 'L'], [-36, -16, 'Q'], [-33, -16, ''], [-30, -14, 'L'], [-30, -14, 'Q'], [-26, -11, ''], [-24, -11, 'L'], [53, -11, 'Q'], [57, -11, ''], [59, -9, 'L'], [137, 69]]], ['r3_ext', 'r3', [[137, 69], [145, 77]]], ['r4', 'r4', [[-159, 34], [-131, 6, 'Q'], [-128, 3, ''], [-124, 3, 'L'], [-104, 3, 'Q'], [-101, 3, ''], [-97, 0, 'L'], [-93, -3, 'Q'], [-89, -6, ''], [-87, -6, 'L'], [-72, -6, 'Q'], [-68, -2, ''], [-64, -2, 'L'], [-26, -2, 'Q'], [-23, -2, ''], [-20, -5, 'L'], [-19, -6]]], ['r4A', 'r4A', [[-72, -6], [-111, 20]]], ['r5', 'r5', [[-66.57, 21.63], [-65.08, 25.77], [-63.34, 29.80], [-61.34, 33.72], [-59.10, 37.51], [-56.63, 41.14], [-53.94, 44.62], [-51.03, 47.92], [-47.92, 51.03], [-44.62, 53.94], [-41.14, 56.63], [-37.51, 59.10], [-33.72, 61.34], [-29.80, 63.34], [-25.77, 65.08], [-21.63, 66.57], [-17.41, 67.80], [-13.12, 68.76], [-8.77, 69.45], [-4.40, 69.86], [0.00, 70.00], [4.40, 69.86], [8.77, 69.45], [13.12, 68.76], [17.41, 67.80], [21.63, 66.57], [25.77, 65.08], [29.80, 63.34], [33.72, 61.34], [37.51, 59.10], [41.14, 56.63], [44.62, 53.94], [47.92, 51.03], [51.03, 47.92], [53.94, 44.62], [56.63, 41.14], [59.10, 37.51], [61.34, 33.72], [63.34, 29.80], [65.08, 25.77], [66.57, 21.63], [67.80, 17.41], [68.76, 13.12], [69.45, 8.77], [69.86, 4.40], [70.00, 0.00], [69.86, -4.40], [69.45, -8.77], [68.76, -13.12], [67.80, -17.41], [66.57, -21.63], [65.08, -25.77], [63.34, -29.80], [61.34, -33.72], [59.10, -37.51], [56.63, -41.14], [53.94, -44.62], [51.03, -47.92], [47.92, -51.03], [44.62, -53.94], [41.14, -56.63], [37.51, -59.10], [33.72, -61.34], [29.80, -63.34], [25.77, -65.08], [21.63, -66.57], [17.41, -67.80], [13.12, -68.76], [8.77, -69.45], [4.40, -69.86], [0.00, -70.00], [-4.40, -69.86], [-8.77, -69.45], [-13.12, -68.76], [-17.41, -67.80], [-21.63, -66.57], [-25.77, -65.08], [-29.80, -63.34], [-33.72, -61.34], [-37.51, -59.10], [-41.14, -56.63], [-44.62, -53.94], [-47.92, -51.03], [-51.03, -47.92], [-53.94, -44.62], [-56.63, -41.14], [-59.10, -37.51], [-61.34, -33.72], [-63.34, -29.80], [-65.08, -25.77], [-66.57, -21.63], [-67.80, -17.41], [-68.76, -13.12], [-69.45, -8.77], [-69.86, -4.40], [-70, 0], [-69.86, 4.40], [-69.45, 8.77], [-68.76, 13.12], [-67.80, 17.41], [-66.57, 21.63]]], ['r6', 'r6', [[36, 129], [36, 38, 'Q'], [36, 35, ''], [34, 32, 'L'], [34, 32, 'Q'], [31, 28, ''], [31, 26, 'L'], [31, -22, 'Q'], [31, -26, ''], [28, -29, 'L'], [-41, -99, 'Q'], [-44, -102, ''], [-44, -106, 'L'], [-44, -168]]], ['r6_ext', 'r6', [[36, 129], [36, 145]]], ['r7', 'r7', [[-105, 115], [-105, 79, 'Q'], [-105, 75, ''], [-103, 73, 'L'], [-60, 31, 'Q'], [-58, 29, ''], [-55, 29, 'L'], [0, 29, 'Q'], [3, 29, ''], [5, 27, 'L'], [26, 6, 'Q'], [28, 4, ''], [28, 0, 'L'], [28, -10, 'Q'], [28, -14, ''], [31, -16, 'L'], [92, -77, 'Q'], [94.5, -80, ''], [98, -80, 'L'], [150, -80, 'Q'], [160, -80, ''], [160, -89, 'L'], [160, -90, 'Q'], [160, -96, ''], [147, -106, 'L'], [136, -116, 'Q'], [130, -121, ''], [130, -125, 'L'], [130, -127]]], ['r8', 'r8', [[18, -40], [88, -40, 'Q'], [90, -40, ''], [94, -36, 'L'], [136, 6]]], ['r8', 'r8_1', [[-104, 11], [-106, 11, 'Q'], [-109, 11, ''], [-112, 8, 'L'], [-117, 3, 'Q'], [-120, 0, ''], [-120, -3, 'L'], [-120, -44], [-120, -59, 'Q'], [-120, -62, ''], [-123, -65, 'L'], [-144, -88, 'Q'], [-147, -91, ''], [-147, -95, 'L'], [-147, -104]]], ['r8_ext', 'r8', [[-104, 11], [-80, 11, 'Q'], [-77, 11, ''], [-74, 8, 'L'], [-27, -37, 'Q'], [-24, -40, ''], [-21, -40, 'L'], [17, -40]]], ['r8_ext', 'r8_1', [[-147, -104], [-147, -110], [-147, -120]]], ['r9', 'r9', [[2, 144], [2, 136], [-26, 107, 'Q'], [-29, 104, ''], [-29, 101, 'L'], [-29, 76, 'Q'], [-29, 73, ''], [-26, 70, 'L'], [-5, 48, 'Q'], [-4, 47, ''], [-4, 46, 'L'], [-4, 41, 'Q'], [-4, 40, ''], [-5, 39, 'L'], [-18, 25.06, 'Q'], [-19, 24, ''], [-19, 21, 'L'], [-19, -19, 'Q'], [-19, -22, ''], [-16, -25, 'L'], [16, -58, 'Q'], [19, -61, ''], [19, -64, 'L'], [19, -127, 'Q'], [19, -130, ''], [16, -133, 'L'], [-15, -172]]], ['r10', 'r10', [[-24, 132], [-24, 118, 'Q'], [-24, 114, ''], [-22, 112, 'L'], [4, 85], [4, 45, 'Q'], [4, 41, ''], [7, 38, 'L'], [82, -36, 'Q'], [84, -38, ''], [84, -42, 'L'], [84, -72, 'Q'], [84, -74.5, ''], [87, -78, 'L'], [105, -96, 'Q'], [108, -99, ''], [108, -103, 'L'], [108, -106, 'Q'], [108, -109, ''], [105, -112, 'L'], [87, -130, 'Q'], [84, -133, ''], [84, -137, 'L'], [84, -163]]], ['r10_ext', 'r10', [[-24, 132], [-24, 153]]], ['r11', 'r11', [[-121, 40], [-88, 40, 'Q'], [-84, 40, ''], [-82, 42, 'L'], [-80, 44], [-44, 80, 'Q'], [-42, 82, ''], [-38, 82, 'L'], [-29, 82]]], ['r11', 'r11_1', [[-29, 82], [57, 82, 'Q'], [60, 82, ''], [63, 79, 'L'], [77, 65, 'Q'], [80, 62, ''], [80, 59, 'L'], [80, 19, 'Q'], [80, 15, ''], [83, 13, 'L'], [101, -5, 'Q'], [103, -7, ''], [103, -11, 'L'], [103, -24, 'Q'], [103, -27, ''], [106, -30, 'L'], [120, -44], [120, -57, 'Q'], [120, -59, ''], [119, -61, 'L'], [68, -130, 'Q'], [65, -136, ''], [60, -136, 'L'], [20, -136]]], ['r11', 'r11_2', [[-121, 40], [-143, 40, 'Q'], [-147, 40, ''], [-149, 37, 'L'], [-163, 23, 'Q'], [-166, 20, ''], [-166, 17, 'L'], [-166, -1, 'Q'], [-166, -5, ''], [-164, -7, 'L'], [-113, -58, 'Q'], [-110, -60, ''], [-110, -64, 'L'], [-110, -100.95], [-50, -133], [16, -133]]], ['r11A', 'r11A', [[-104, 11, 'Q'], [-116, 18, ''], [-116, 20, 'L'], [-116, 30, 'Q'], [-116, 32, ''], [-112, 32, 'L'], [-86, 32, 'Q'], [-80, 32, ''], [-80, 36, 'L'], [-80, 44]]], ['r12', 'r12', [[-40, -168], [-19, -177], [-28, -186], [-89, -186]]], ['r13', 'r13', [[-25, 100], [31, 100, 'Q'], [33, 100, ''], [33, 102, 'L'], [33, 103]]], ['r14', 'r14', [[-116.77, 7.35], [-116.08, 14.66], [-114.93, 21.92], [-113.32, 29.1], [-111.27, 36.15], [-108.78, 43.07], [-105.86, 49.82], [-102.53, 56.37], [-98.79, 62.69], [-94.65, 68.77], [-90.15, 74.58], [-85.29, 80.09], [-80.09, 85.29], [-74.58, 90.15], [-68.77, 94.65], [-62.69, 98.79], [-56.37, 102.53], [-49.82, 105.86], [-43.07, 108.78], [-36.15, 111.27], [-29.1, 113.32], [-21.92, 114.93], [-14.66, 116.08], [-7.35, 116.77], [0, 117], [7.35, 116.77], [14.66, 116.08], [21.92, 114.93], [29.1, 113.32], [36.15, 111.27], [43.07, 108.78], [49.82, 105.86], [56.37, 102.53], [62.69, 98.79], [68.77, 94.65], [74.58, 90.15], [80.09, 85.29], [85.29, 80.09], [90.15, 74.58], [94.65, 68.77], [98.79, 62.69], [102.53, 56.37], [105.86, 49.82], [108.78, 43.07], [111.27, 36.15], [113.32, 29.1], [114.93, 21.92], [116.08, 14.66], [116.77, 7.35], [117, -0], [116.77, -7.35], [116.08, -14.66], [114.93, -21.92], [113.32, -29.1], [111.27, -36.15], [108.78, -43.07], [105.86, -49.82], [102.53, -56.37], [98.79, -62.69], [94.65, -68.77], [90.15, -74.58], [85.29, -80.09], [80.09, -85.29], [74.58, -90.15], [68.77, -94.65], [62.69, -98.79], [56.37, -102.53], [49.82, -105.86], [43.07, -108.78], [36.15, -111.27], [29.1, -113.32], [21.92, -114.93], [14.66, -116.08], [7.35, -116.77], [0, -117], [-7.35, -116.77], [-14.66, -116.08], [-21.92, -114.93], [-29.1, -113.32], [-36.15, -111.27], [-43.07, -108.78], [-49.82, -105.86], [-56.37, -102.53], [-62.69, -98.79], [-68.77, -94.65], [-74.58, -90.15], [-80.09, -85.29], [-85.29, -80.09], [-90.15, -74.58], [-94.65, -68.77], [-98.79, -62.69], [-102.53, -56.37], [-105.86, -49.82], [-108.78, -43.07], [-111.27, -36.15], [-113.32, -29.1], [-114.93, -21.92], [-116.08, -14.66], [-116.77, -7.35], [-117, 0], [-116.77, 7.35]]], ['r15', 'r15', [[120, -44], [135, -59, 'Q'], [137, -61, ''], [137, -65, 'L'], [137, -82, 'Q'], [137, -85, ''], [140, -88, 'L'], [162, -112, 'Q'], [165, -115, ''], [165, -118, 'L'], [165, -140]]], ['r16_ext', 'r16', [[-125, -158], [-85, -116], [-14, -116]]], ['t', 'svo', [[-51, 55], [-28, 76, 'Q'], [-26, 78, ''], [-26, 81, 'L'], [-26, 100, 'Q'], [-26, 102, ''], [-24, 104, 'L'], [-18, 110, 'Q'], [-16, 112, ''], [-16, 113, 'L'], [-16, 160, 'Q'], [-16, 162, ''], [-18, 162, 'L'], [-25, 162]]], ['t', 'vko', [[-75, -20], [-100, -20, 'Q'], [-105, -20, ''], [-109, -25, 'L'], [-153, -80, 'Q'], [-156, -83, ''], [-156, -86, 'L'], [-156, -121, 'Q'], [-156, -123, ''], [-153, -123, 'L'], [-150, -123]]], ['t', 'dme', [[50, -61], [50, -190, 'Q'], [52, -192, ''], [54, -194, 'L'], [60, -200]]], ['rmcd1', 'rmcd1', [[-216, -46], [-168, 27, 'Q'], [-165, 30, ''], [-162, 27, 'L'], [-135, 0, 'Q'], [-133, -3, ''], [-130, 0, 'L'], [-116, 23, 'Q'], [-114, 26, ''], [-110, 26, 'L'], [-87, 26, 'Q'], [-85, 26, ''], [-83, 28, 'L'], [-30, 75, 'Q'], [-27, 78, ''], [-27, 82, 'L'], [-27, 99, 'Q'], [-27, 103, ''], [-24, 106, 'L'], [-17, 112, 'Q'], [-15, 114, ''], [-15, 116, 'L'], [-15, 175]]], ['rmcd2', 'rmcd2', [[28, -210], [28, -158, 'Q'], [28, -153, ''], [33, -152, 'L'], [68, -147, 'Q'], [73, -146, ''], [75, -143, 'L'], [103, -102, 'Q'], [105, -99, ''], [105, -98, 'L'], [105, -58, 'Q'], [105, -56, ''], [103, -53, 'L'], [74, -11, 'Q'], [72, -9, ''], [72, -7, 'L'], [72, 23, 'Q'], [72, 25, ''], [71, 27, 'L'], [44, 83, 'Q'], [43, 85, ''], [39, 86, 'L'], [-24, 93], [-32, 94], [-82, 87, 'Q'], [-84, 87, ''], [-88, 85, 'L'], [-102, 76], [-102, 95], [-156, 82, 'Q'], [-160, 80, ''], [-164, 82, 'L'], [-164, 82, 'Q'], [-170, 84, ''], [-178, 94, 'L'], [-200, 122]]], ['rmcd3', 'rmcd3', [[-120, 150], [-88, 126], [-80, 124], [-22, 114], [58, 77, 'Q'], [70, 71, ''], [73, 58, 'L'], [76, 17], [105, -2], [108, -27], [138, -60], [152, -87], [159, -104], [160, -112], [160, -200]]], ['inch', 'Kievskaya_3_4_5', [[-72, -6], [-69.09, -11], [-72, -16], [-72, -6]]], ['inch_ext', 'Rossyskaya__Dorogomilovskaya', [[-69.38, 9.24], [-69.38, 3.63]]], ['inch', 'Krasnopresnenskaya__Barrikadnaya', [[-64.8, 26.41], [-60.34, 31.34]]], ['inch', 'Belorusskaya', [[-47, 51.84], [-47, 57.78]]], ['inch', 'Mendeleyevskaya__Novoslobodskaya', [[-26, 65], [-26, 70]]], ['inch_ext', 'Dostoyevskaya__Suvorovskaya', [[4, 75], [4, 69.88]]], ['inch', 'Prospekt_Mira', [[33, 61.7], [36, 65]]], ['inch', 'Komsomolskaya', [[55.19, 43], [60, 43]]], ['inch', 'Kurskaya_3__Kurskaya_5__Chkalov', [[62.27, -5.73], [69.03, -11.43], [62.27, -16.53], [62.27, -5.73]]], //['inch',      'Kurskaya_3__Chkalovskaya',        [[62.27,-5.73],[62.27,-16.53]]],
    ['inch', 'Taganskaya__Marksistskaya', [[60, -36], [64, -40], [60, -45], [60, -36]]], //['inch',      'Taganskaya',                      [[60,-36],[60,-45]]],
    ['inch', 'Paveletskaya', [[39.13, -58], [45, -58]]], ['inch', 'Dobryninskaya__Serpukhovskaya', [[19, -67.33], [19, -72]]], ['inch', 'Oktyabrskaya', [[-11.46, -69], [-7.92, -65.45]]], ['inch', 'Park_Kultury', [[-53, -45.68], [-53, -50]]], ['inch', 'Sokolniki', [[76.37, 59.36], [76.37, 65.67]]], ['inch', 'Turgenev__Chistye_Pr__Sreten_Blv', [[31, 24], [35, 19], [31, 14.32], [31, 24]]], ['inch', 'Kuznetsky_Most__Lubyanka', [[11.5, 20.5], [11.5, 14.5]]], ['inch', 'Okhotny_Ryad__Teatral__Pl_Revol', [[-3.8, -0.7], [1.6, -6], [6.8, -11]]], ['inch', 'Lenina__Arbat__Alex_Sad__Borov', [[-14, -11], [-19, -6], [-24, -11], [-14, -11], [-19, -16], [-24, -11]]], ['inch_ext', 'Kropotkinskaya__Volkhonka', [[-29.83, -26.83], [-29.83, -34.29]]], ['inch', 'Prospekt_Vernadskogo', [[-110, -107.5], [-110, -100.95]]], ['inch_ext', 'Kommunarka', [[-125, -158], [-130, -156]]], ['inch', 'Dinamo__Petrovsky_Park', [[-56.7, 67.3], [-52.85, 71.15]]], ['inch', 'Tverskaya__Pushkin__Chekhovskaya', [[-29, 24], [-19, 24], [-24, 29], [-29, 24]]], ['inch', 'Tretyakovskaya__Novokuznetskaya', [[17.2, -40], [23.10, -33.98]]], ['inch', 'Kashirskaya', [[68, -130]]], ['inch', 'Krasnogvardeyskaya__Zyablikovo', [[81, -160], [84, -163]]], ['inch', 'Kuntsevskaya', [[-159, 34], [-152.2, 34]]], ['inch_ext', 'Smolenskaya__Plyushchikha', [[-42, -16], [-42, -22.55]]], ['inch_out', 'Elektrozavodskaya', [[80, 12], [80, 19]]], ['inch', 'Rizhskaya', [[36, 77], [36, 82]]], ['inch', 'Kitay_Gorod', [[31, -16]]], ['inch_ext', 'Akademicheskaya', [[-44, -112], [-40, -116.2]]], ['inch', 'Kaluzhskaya', [[-44, -133], [-49, -133]]], ['inch', 'Novoyasenevskaya__Bittsev_Park', [[-44, -168], [-40, -168]]], ['inch', 'Polezhaevskaya__Khoroshyobskaya', [[-80, 50.54], [-80, 44]]], ['inch', 'Proletarskaya__Krestyan_Zastava', [[80, -65], [84, -61]]], ['inch', 'Tekstilshchiki', [[105, -80], [108, -76]]], ['inch', 'Lermontovsky_Prospekt__Kosino', [[147, -106], [156.5, -106]]], ['inch', 'Michurinsky_Prospekt', [[-120, -58], [-113, -58]]], ['inch', 'Park_Pobedy', [[-120, -16]]], ['inch', 'Vystavochnaya__Delovoy_Tsentr', [[-97, 11], [-104, 11]]], ['inch', 'Rimskaya__Ploshchad_Ilicha', [[84, -44], [88, -40]]], ['inch_out', 'Aviamotornaya', [[99.8, -30], [106, -30]]], ['inch', 'Savyolovskaya', [[-29, 82], [-34, 82]]], ['inch', 'Tsvetnoy_Bulvar__Trubnaya', [[-4, 43.5], [4.17, 43.5]]], ['inch', 'Sevastopolskaya__Kakhovskaya', [[16, -133], [20, -136]]], ['inch', 'Bl_Dm_Donskogo__Ul_Starokachalov', [[-19, -177], [-15, -172]]], ['inch', 'Petr_Razumovskaya', [[-21.52, 111.48]]], ['inch', 'Marina_Roshcha', [[4, 85], [7, 82]]], ['inch', 'Pechatniki', [[98, -89.5], [94.6, -94]]], ['inch_ext', 'Novatorskaya', [[-88, -112.7], [-85, -116]]], ['inch', 'Nizhegorodskaya', [[109.9, -40]]], ['inch_mck', 'Okruzhnaya', [[-24, 117.57], [-20, 115.2]]], ['inch_mck', 'Voykovskaya__Baltiiskaya', [[-79.8, 90], [-74, 90.7]]], ['inch_mck', 'Oktyabr_Pole__Zorge', [[-98.5, 68.5], [-93, 71]]], ['inch_mck', 'Khoroshevo__Polezhaevskaya', [[-105.5, 50.54], [-80, 50.54]]], ['inch_mck', 'Shelepikha', [[-116, 27], [-113, 29.5]]], ['inch_mck', 'Delovoy_Tsentr__Mezhdunarodnaya', [[-115, 21], [-111, 20]]], ['inch_mck', 'Kutuzovskaya', [[-120, 3], [-116.8, 7]]], ['inch_mck', 'Sportivnaya__Luzhniki', [[-81, -78], [-87, -78]]], ['inch_mck', 'Pl_Gagarina__Lenins_Prospekt', [[-49, -106.2], [-41, -99]]], ['inch_mck', 'V_Kotly__Nagatinskaya', [[30, -113.1], [19, -117]]], ['inch_mck', 'Avtozavodskaya', [[65, -97], [68, -90]]], ['inch_mck', 'Kozhukhovskaya_Dubrovka', [[92, -83], [83.4, -82], [84, -72]]], ['inch_mck', 'Ugreshskaya__Volgograd_Prospekt', [[94.2, -69], [89, -74]]], ['inch_mck', 'Nizhegorodskaya', [[109.9, -40], [120, -44]]], ['inch_mck', 'Shosse_Entuziastov', [[109.5, -20.45], [115.7, -17]]], ['inch_mck', 'Izmaylovo__Partizanskaya', [[106.7, 48], [113.45, 45.45]]], ['inch_mck', 'Lokomotiv__Cherkizovskaya', [[94.2, 69.4], [89.3, 72.3]]], ['inch_mck', 'Bulvar_Rokossovskogo', [[85.6, 80], [80, 80]]], ['inch_mck', 'Botanichesky_Sad', [[42.6, 109], [36, 106]]], ['inch_mck', 'Vladykino', [[-11, 122.5], [-11, 116.4]]], ['inch_out', 'Timiryazevskaya', [[-29, 101], [-25, 100]]], ['inch_out', 'Fonvizinskaya__Ul_Milashenkova', [[-13.5, 103.2], [-13, 100]]], ['inch_out', 'VDNH__Vystavochny_Tsentr', [[36, 98], [31, 100]]], ['inch_mcd', 'Kuntsevskaya', [[-159, 34], [-165, 28.5]]], ['inch_mcd', 'Slavyansky_Bulvar', [[-145, 10], [-149, 5]]], ['inch_mcd', 'Fili', [[-128.2, 3], [-131.08, 6.08]]], ['inch_mcd', 'Okruzhnaya', [[-15, 121], [-24, 117.57]]], ['inch_mcd', 'Tsaritsyno', [[68, -144], [72.9, -145]]], ['inch_mcd', 'Pechatniki_Kubanskaya', [[98, -89.5], [105, -92]]], ['inch_mcd', 'Novohohlovskaya', [[105.2, -51], [101.5, -51]]], ['inch_mcd', 'Moskva_Tovarnaya__Pl_Ilicha', [[91.3, -36], [88, -40]]], ['inch_mcd', 'Kurskaya', [[69.03, -11.43], [72.5, -9]]], ['inch_mcd', 'Kalanch__Komsomol', [[60, 50], [60, 43]]], ['inch_mcd', 'Rizhskaya', [[36, 77], [44, 83]]], ['inch_mcd', 'Dmitrovskaya', [[-32, 94], [-29, 91]]], ['inch_mcd', 'Streshnevo', [[-82, 87], [-82.4, 83]]], ['inch_mcd', 'Streshnevo__Voykovskaya', [[-82, 87], [-79.8, 90]]], ['inch_mcd', 'Pokrov_Streshnevo__Shchukinskaya', [[-102, 76], [-103, 73]]], ['inch_mcd', 'Tushinskaya', [[-102, 95], [-105, 92]]], ['inch_mcd', 'Volokolamskaya', [[-164, 82], [-159, 84]]], ['inch_mcd', 'Vykhino', [[152, -87], [160, -90]]], ['inch_mcd', 'Kosino', [[159, -104], [156.5, -106]]], ['inch_mcd', 'Uhtomskaya__Lermont_Prosp', [[160, -112], [147, -106]]], ['inch_mcd', 'Veshnyaki__Ryazan_Prosp', [[145.2, -74], [142, -80]]], ['inch_mcd', 'Aviamotornaya', [[108, -27], [106, -30]]], ['inch_mcd', 'Elektrozavodskaya', [[76, 17], [80, 19]]], ['inch_mcd', 'Petr_Razomovskaya', [[-22, 114], [-21.52, 111.48]]], ['inch_mcd', 'Khovrino', [[-88, 126], [-92, 123]]]];
export var MSTS = [['s1_8', 'Bulvar_Rokossovskogo', [[80, 80]], 'Б-р Рокоссовского'], ['s1_8', 'Cherkizovskaya', [[89.3, 72.3]], 'Черкизовская'], ['s1', 'Preobrazhenskaya_Pl', [[84, 67]], 'Преображенская площадь'], ['s1_1', 'Sokolniki', [[76.37, 59.36]], 'Сокольники'], ['s1', 'Krasnoselskaya', [[68.52, 51.52]], 'Красносельская'], ['s1_1', 'Komsomolskaya', [[60, 43]], 'Комсомольская'], ['s1', 'Krasniye_Vorota', [[48.89, 31.89]], 'Красные ворота'], ['s1_1', 'Chistye_Prudy', [[35, 19]], 'Чистые пруды'], ['s1_2', 'Lubyanka', [[11.5, 14.5]], 'Лубянка'], ['s1_1', 'Okhotny_Ryad', [[-3.8, -0.7]], 'Охотный ряд'], ['s1_4', 'Biblioteka_Im_Lenina', [[-14, -11]], 'Б. им. Ленина'], ['s1_1', 'Kropotkinskaya', [[-29.83, -26.83]], 'Кропоткинская'], ['s1_2', 'Park_Kultury', [[-53, -50]], 'Парк Культуры'], ['s1', 'Frunzenskaya', [[-68, -65]], 'Фрунзенская'], ['s1', 'Sportivnaya', [[-81, -78]], 'Спортивная'], ['s1', 'Vorobyovy_Gory', [[-97, -94]], 'Воробьёвы горы'], ['s1', 'Universitet', [[-103, -100]], 'Университет'], ['s1_2', 'Prospekt_Vernadskogo', [[-110, -107.5]], 'Пр-т Вернадского'], ['s1', 'Yugo_Zapadnaya', [[-113, -110.5]], 'Юго-Западная'], ['s1', 'Troparyovo', [[-118, -115.5]], 'Тропарёво'], ['s1', 'Rumyantsevo', [[-123, -120.8]], 'Румянцево'], ['s1', 'Salaryevo', [[-128, -126]], 'Саларьево'], ['s1_5', 'Filatov_Lug', [[-130, -134]], 'Филатов Луг'], ['s1_5', 'Prokshino', [[-130, -142]], 'Прокшино'], ['s1_5', 'Olhovaya', [[-130, -149]], 'Ольховая'], ['s1_2', 'Kommunarka', [[-130, -156]], 'Коммунарка'], ['s1', 'Potapovo', [[-118, -172]], 'Потапово'], ['s2', 'Khovrino', [[-92, 123]], 'Ховрино'], ['s2', 'Belomorskaya', [[-92, 115]], 'Беломорская'], ['s2', 'Rechnoy_Vokzal', [[-92, 107]], 'Речной вокзал'], ['s2_1', 'Vodny_Stadion', [[-85.9, 96]], 'Водный ст-н'], ['s2_4', 'Voykovskaya', [[-79.8, 90]], 'Войковская'], ['s2', 'Sokol', [[-72, 82.3]], 'Сокол'], ['s2', 'Aeroport', [[-64, 74.46]], 'Аэропорт'], ['s2_2', 'Dinamo', [[-56.7, 67.3]], 'Динамо'], ['s2_3', 'Belorusskaya', [[-47, 57.78]], ''], ['s2', 'Mayakovskaya', [[-31, 38]], 'Маяковская'], ['s2_7', 'Tverskaya', [[-29, 24]], 'Тверская'], ['s2_3', 'Teatralnaya', [[1.6, -6]], 'Театральная'], ['s2_2', 'Novokuznetskaya', [[23.10, -33.98]], 'Новокузнецкая'], ['s2_3', 'Paveletskaya', [[45, -58]], 'Павелецкая'], ['s2_4', 'Avtozavodskaya', [[68, -90]], 'Автозаводская'], ['s2', 'Tekhnopark', [[68, -104]], 'Технопарк'], ['s2_4', 'Kolomenskaya', [[68, -113]], 'Коломенская'], ['s2_3', 'Kashirskaya', [[68, -130]], 'Каширская'], ['s2_4', 'Kantemirovskaya', [[68, -138]], 'Кантемировская'], ['s2_4', 'Tsaritsyno', [[68, -144]], 'Царицыно'], ['s2_4', 'Orekhovo', [[72.4, -150.5]], 'Орехово'], ['s2_4', 'Domodedovskaya', [[76.4, -155]], 'Домодедовская'], ['s2_2', 'Krasnogvardeyskaya', [[81, -160]], 'Красногвардейская'], ['s2_6', 'Alma_Atinskaya', [[95, -160]], 'Алма-Атинская'], ['s3', 'Pyatnitskoye_Shosse', [[-159, 100]], 'Пятницкое шоссе'], ['s3', 'Mitino', [[-159, 92]], 'Митино'], ['s3', 'Volokolamskaya', [[-159, 84]], 'Волоколамская'], ['s3', 'Myakinino', [[-159, 74]], 'Мякинино'], ['s3', 'Strogino', [[-159, 66]], 'Строгино'], ['s3', 'Krylatskoye', [[-159, 58]], 'Крылатское'], ['s3', 'Molodyozhnaya', [[-159, 50]], 'Молодёжная'], ['s3_7', 'Kuntsevskaya', [[-159, 34]], 'Кунцевская'], ['s3_1', 'Slavyansky_Bulvar', [[-149, 5]], 'Славянский б-р'], ['s3_5', 'Park_Pobedy', [[-120, -16]], 'Парк Победы'], ['s3_3', 'Kievskaya', [[-72, -16]], 'Киевская'], ['s3_3', 'Smolenskaya', [[-42, -16]], 'Смоленская'], ['s3_7', 'Arbatskaya', [[-24, -11]], 'Арбатская'], ['s3_4', 'Ploshad_Revolyutsii', [[6.8, -11]], 'П.Революции'], ['s3_7', 'Kurskaya', [[62.27, -5.73]], 'Курская'], ['s3', 'Baumanskaya', [[74, 6]], 'Бауманская'], ['s3', 'Elektrozavodskaya', [[80, 12]], ''], ['s3', 'Semyonovskaya', [[100.6, 32.6]], 'Семёновская'], ['s3', 'Partizanskaya', [[113.45, 45.45]], 'Партизанская'], ['s3', 'Izmaylovskaya', [[121.3, 53.3]], 'Измайловская'], ['s3', 'Pervomayskaya', [[129.15, 61.15]], 'Первомайская'], ['s3', 'Shchyolkovskaya', [[137, 69]], 'Щёлковская'], ['s3', 'Golyanovo', [[145, 77]], 'Гольяново'], ['s4A', 'Mezhdunarodnaya', [[-111, 20]], 'Международная'], ['s4A_1', 'Vystavochnaya', [[-97, 11]], 'Выставочная'], ['s4A_2', 'Kievskaya', [[-72, -6]], ''], ['s4_5', 'Kuntsevskaya', [[-159, 34]], ''], ['s4', 'Pionerskaya', [[-152.01, 27.01]], 'Пионерская'], ['s4', 'Filyovsky_Park', [[-144.94, 19.94]], 'Филёвский парк'], ['s4', 'Bagrationovskaya', [[-137.88, 12.88]], 'Багратионовская'], ['s4', 'Fili', [[-131.08, 6.08]], 'Фили'], ['s4_7', 'Kutuzovskaya', [[-120, 3]], 'Кутузовская'], ['s4_1', 'Studencheskaya', [[-93, -3]], 'Студенческая'], ['s4_2', 'Kievskaya', [[-72, -6]], ''], ['s4_6', 'Smolenskaya', [[-52.85, -2]], 'Смоленская-2'], ['s4_3', 'Arbatskaya', [[-32.7, -2]], 'Арбатская-2'], ['s4_2', 'Alexandrovsky_Sad', [[-19, -6]], 'Александровский сад'], ['s5', 'Komsomolskaya', [[55.19, 43]], ''], ['s5_2', 'Kurskaya', [[69.03, -11.43]], 'Курская'], ['s5_3', 'Taganskaya', [[60, -36]], ''], ['s5', 'Paveletskaya', [[39.13, -58]], ''], ['s5_2', 'Dobryninskaya', [[19, -67.33]], 'Добрынинская'], ['s5', 'Oktyabrskaya', [[-11.46, -69]], ''], ['s5_1', 'Park_Kultury', [[-53, -45.68]], ''], ['s5', 'Kievskaya', [[-69.09, -11]], ''], ['s5_3', 'Rossyskaya', [[-69.38, 9.24]], 'Российская'], ['s5_2', 'Krasnopresnenskaya', [[-64.8, 26.41]], 'Краснопресненская'], ['s5_2', 'Belorusskaya', [[-47, 51.84]], 'Белорусская'], ['s5_2', 'Novoslobodskaya', [[-26, 65]], 'Новослободская'], ['s5', 'Suvorovskaya', [[4, 69.88]], 'Суворовская'], ['s5', 'Prospekt_Mira', [[33, 61.7]], ''], ['s5_1', 'Komsomolskaya', [[55.19, 43]], ''], // closed radial
    ['s6', 'Mytishchi', [[36, 145]], 'Мытищи'], ['s6', 'Chelobityevo', [[36, 137]], 'Челобитьево'], ['s6', 'Medvedkovo', [[36, 129]], 'Медведково'], ['s6', 'Babushkinskaya', [[36, 121]], 'Бабушкинская'], ['s6', 'Sviblovo', [[36, 113]], 'Свиблово'], ['s6', 'Botanichesky_Sad', [[36, 106]], 'Ботанический сад'], ['s6', 'VDNH', [[36, 98]], 'ВДНХ'], ['s6', 'Alexeyevskaya', [[36, 90]], 'Алексеевская'], ['s6_2', 'Rizhskaya', [[36, 77]], 'Рижская'], ['s6_2', 'Prospekt_Mira', [[36, 65]], 'Пр-т Мира'], ['s6_1', 'Sukharevskaya', [[36, 49]], 'Сухаревская'], ['s6_2', 'Turgenevskaya', [[31, 24]], 'Тургеневская'], ['s6_2', 'Kitay_Gorod', [[31, -16]], 'Китай-город'], ['s6_4', 'Tretyakovskaya', [[17.2, -40]], 'Третьяковская'], ['s6_3', 'Oktyabrskaya', [[-7.92, -65.45]], 'Октябрьская'], ['s6', 'Shabolovskaya', [[-32.89, -90.83]], 'Шаболовская'], ['s6', 'Leninsky_Prospekt', [[-41, -99]], 'Ленинский пр-т'], ['s6_2', 'Akademicheskaya', [[-44, -112]], 'Академическая'], ['s6', 'Profsoyuznaya', [[-44, -119]], 'Профсоюзная'], ['s6_6', 'Noviye_Cheryomushki', [[-44, -126]], 'Новые Черёмушки'], ['s6_7', 'Kaluzhskaya', [[-44, -133]], 'Калужская'], ['s6', 'Belyayevo', [[-44, -140]], 'Беляево'], ['s6', 'Konkovo', [[-44, -147]], 'Коньково'], ['s6', 'Tyoplyi_Stan', [[-44, -154]], 'Тёплый Стан'], ['s6', 'Yasenevo', [[-44, -161]], 'Ясенево'], ['s6_5', 'Novoyasenevskaya', [[-44, -168]], 'Новоясеневская'], ['s7', 'Planernaya', [[-105, 115]], 'Планерная'], ['s7', 'Skhodnenskaya', [[-105, 103]], 'Сходненская'], ['s7', 'Tushinskaya', [[-105, 92]], 'Тушинская'], ['s7', 'Spartak', [[-105, 80]], 'Спартак'], ['s7', 'Shchukinskaya', [[-103, 73]], 'Щукинская'], ['s7_8', 'Oktyabrskoye_Pole', [[-98.5, 68.5]], 'Октябрьское поле'], ['s7_11', 'Polezhaevskaya', [[-80, 50.54]], 'Полежаевская'], ['s7_9', 'Begovaya', [[-72, 42.7]], 'Беговая'], ['s7_9', 'Ulitsa_1905_Goda', [[-67, 37.8]], 'Улица 1905 года'], ['s7_10', 'Barrikadnaya', [[-60.34, 31.34]], 'Баррикадная'], ['s7_2', 'Pushkinskaya', [[-24, 29]], 'Пушкинская'], ['s7_1', 'Kuznetsky_Most', [[11.5, 20.5]], 'Кузнецкий мост'], ['s7_5', 'Kitay_Gorod', [[31, -16]], ''], ['s7_10', 'Taganskaya', [[60, -45]], 'Таганская'], ['s7_1', 'Proletarskaya', [[80, -65]], 'Пролетарская'], ['s7_6', 'Volgograd_Prospekt', [[89, -74]], 'Волг. пр-т'], ['s7_3', 'Tekstilshchiki', [[105, -80]], 'Текстильщики'], ['s7_7', 'Kuzminki', [[126, -80]], 'Кузьминки'], ['s7_4', 'Ryazan_Prospekt', [[142, -80]], 'Рязанский пр-т'], ['s7', 'Vykhino', [[160, -90]], 'Выхино'], ['s7_1', 'Lermontov_Prospekt', [[147, -106]], 'Лермонтовский пр-т'], ['s7', 'Zhulebino', [[136, -116]], 'Жулебино'], ['s7_8', 'Kotelniki', [[130, -127]], 'Котельники'], ['s8', 'Vnukovo', [[-147, -120]], 'Внуково'], ['s8', 'Pyhtino', [[-147, -112]], 'Пыхтино'], ['s8', 'Rasskazovka', [[-147, -104]], 'Рассказовка'], ['s8', 'Novoperedelkino', [[-147, -96]], 'Новопеределкино'], ['s8', 'Borovskoye_Shosse', [[-143.2, -87]], 'Боровское шоссе'], ['s8', 'Solntsevo', [[-136.8, -80]], 'Солнцево'], ['s8', 'Govorovo', [[-130.3, -73]], 'Говорово'], ['s8', 'Ozernaya', [[-124, -66]], 'Озёрная'], ['s8_2', 'Michurinsky_Prospekt', [[-120, -58]], ''], ['s8', 'Ramenki', [[-120, -44]], 'Раменки'], ['s8', 'Lomonosov_Prospekt', [[-120, -35]], 'Ломоносовский пр-т'], ['s8', 'Minskaya', [[-120, -25]], 'Минская'], ['s8_6', 'Park_Pobedy', [[-120, -16]], ''], ['s8_2', 'Delovoy_Tsentr', [[-104, 11]], 'Деловой центр'], ['s8_3', 'Dorogomilovskaya', [[-69.38, 3.63]], 'Дорогомиловская'], ['s8_4', 'Plyushchikha', [[-42, -22.55]], 'Плющиха'], ['s8_1', 'Volkhonka', [[-29.83, -34.29]], 'Волхонка'], ['s8_6', 'Tretyakovskaya', [[17.2, -40]], ''], ['s8_3', 'Marksistskaya', [[64, -40]], 'Марксистская'], ['s8_1', 'Ploshchad_Ilicha', [[88, -40]], 'Пл.Ильича'], ['s8', 'Aviamotornaya', [[99.8, -30]], ''], ['s8', 'Shosse_Entuziastov', [[109.5, -20.45]], 'Шоссе Энтузиастов'], ['s8', 'Perovo', [[120, -9.9]], 'Перово'], ['s8', 'Novogireevo', [[128, -1.9]], 'Новогиреево'], ['s8', 'Novokosino', [[136, 6]], 'Новокосино'], ['s9', 'Altufyevo', [[2, 144]], 'Алтуфьево'], ['s9', 'Bibirevo', [[2, 136]], 'Бибирево'], ['s9', 'Otradnoye', [[-4, 129.8]], 'Отрадное'], ['s9', 'Vladykino', [[-11, 122.5]], 'Владыкино'], ['s9_2', 'Petr_Razumovskaya', [[-21.52, 111.48]], 'Петровско-Разумовская'], ['s9_4', 'Timiryazevskaya', [[-29, 101]], 'Тимирязевская'], ['s9', 'Dmitrovskaya', [[-29, 91]], 'Дмитровская'], ['s9_5', 'Savyolovskaya', [[-29, 82]], 'Савёловская'], ['s9_5', 'Mendeleyevskaya', [[-26, 70]], 'Менделеевская'], ['s9_1', 'Tsvetnoy_Bulvar', [[-4, 43.5]], 'Цветной б-р'], ['s9_2', 'Chekhovskaya', [[-19, 24]], 'Чеховская'], ['s9_3', 'Borovitskaya', [[-19, -16]], 'Боровицкая'], ['s9_4', 'Polyanka', [[3.4, -45]], 'Полянка'], ['s9_2', 'Serpukhovskaya', [[19, -72]], 'Серпуховская'], ['s9', 'Tulskaya', [[19, -99]], 'Тульская'], ['s9', 'Nagatinskaya', [[19, -117]], 'Нагатинская'], ['s9', 'Nagornaya', [[19, -122]], 'Нагорная'], ['s9', 'Nakhimovsky_Prospekt', [[19, -127]], 'Нахимовский пр-т'], ['s9_6', 'Sevastopolskaya', [[16, -133]], 'Севастопольская'], ['s9', 'Chertanovskaya', [[11.2, -139]], 'Чертановская'], ['s9', 'Yuzhnaya', [[6.5, -145]], 'Южная'], ['s9', 'Prazhskaya', [[1.7, -151]], 'Пражская'], ['s9', 'Ulitsa_Ak_Yangelya', [[-3.1, -157]], 'Ул. Ак. Янгеля'], ['s9', 'Annino', [[-7.8, -163]], 'Аннино'], ['s9_2', 'Bulvar_Dm_Donskogo', [[-15, -172]], 'Бульвар Дм. Донского'], ['s10', 'Fizteh', [[-24, 153]], 'Физтех'], ['s10', 'Lianozovo', [[-24, 146]], 'Лианозово'], ['s10', 'Yahromskaya', [[-24, 139]], 'Яхромская'], ['s10', 'Seligerskaya', [[-24, 132]], 'Селигерская'], ['s10', 'Verkhniye_Likhobory', [[-24, 125]], 'Верхние Лихоборы'], ['s10', 'Okruzhnaya', [[-24, 117.57]], 'Окружная'], ['s10_4', 'Petr_Razumovskaya', [[-21.52, 111.48]], ''], ['s10_1', 'Fonvizinskaya', [[-13.5, 103.2]], 'Фонвизинская'], ['s10_1', 'Butyrskaya', [[-4.7, 94]], 'Бутырская'], ['s10_6', 'Marina_Roshcha', [[4, 85]], 'Марьина Роща'], ['s10_2', 'Dostoyevskaya', [[4, 75]], 'Достоевская'], ['s10_2', 'Trubnaya', [[4.17, 43.5]], 'Трубная'], ['s10_2', 'Sretensky_Bulvar', [[31, 14.32]], 'Сретенский бульвар'], ['s10_2', 'Chkalovskaya', [[62.27, -16.53]], 'Чкаловская'], ['s10_2', 'Rimskaya', [[84, -44]], 'Римская'], ['s10_2', 'Krestyansk_Zastava', [[84, -61]], 'Крестьянская застава'], ['s10', 'Dubrovka', [[84, -72]], 'Дубровка'], ['s10_5', 'Kozhukhovskaya', [[92, -83]], 'Кожуховская'], ['s10_2', 'Pechatniki', [[98, -89.5]], 'Печатники'], ['s10', 'Volzhskaya', [[108, -105]], 'Волжская'], ['s10_1', 'Lyublino', [[99, -118]], 'Люблино'], ['s10_1', 'Bratislavskaya', [[91, -126]], 'Братиславская'], ['s10_1', 'Marino', [[84, -137]], 'Марьино'], ['s10_1', 'Borisovo', [[84, -145]], 'Борисово'], ['s10_1', 'Shipilovskaya', [[84, -153]], 'Шипиловская'], ['s10_3', 'Zyablikovo', [[84, -163]], 'Зябликово'], ['s11', 'Kuntsevskaya', [[-152.2, 34]], ''], ['s11_8', 'Terekhovo', [[-137, 40]], 'Терехово'], ['s11_6', 'Mnyovniki', [[-121, 40]], 'Мнёвники'], ['s11_15', 'Narodnoe_Opolchenie', [[-105, 40]], 'Народ. Ополчение'], ['s11_9', 'Khoroshyobskaya', [[-80, 44]], 'Хорошёвская'], ['s11_1', 'CSKA', [[-67, 57]], 'ЦСКА'], ['s11_7', 'Petrovsky_Park', [[-52.85, 71.15]], 'Петровский Парк'], ['s11_14', 'Savyolovskaya', [[-34, 82]], ''], ['s11_11', 'Marina_Roshcha', [[7, 82]], ''], ['s11_4', 'Rizhskaya', [[36, 82]], ''], ['s11_9', 'Sokolniki', [[76.37, 65.67]], ''], ['s11_1', 'Elektrozavodskaya', [[80, 19]], 'Электрозаводская'], ['s11_1', 'Lefortovo', [[98, -2]], 'Лефортово'], ['s11_1', 'Aviamotornaya', [[106, -30]], 'Авиамоторная'], ['s11_3', 'Nizhegorodskaya', [[120, -44]], ''], ['s11_3', 'Tekstilshchiki', [[108, -76]], ''], ['s11_9', 'Pechatniki', [[94.6, -94]], 'Печатники'], ['s11_1', 'Nagatinsky_Zaton', [[79.8, -114]], 'Нагатинский затон'], ['s11_1', 'Klenoviy_bulvar', [[73.8, -122]], 'Кленовый б-р'], ['s11_5', 'Kashirskaya', [[68, -130]], ''], ['s11_10', 'Varshavskaya', [[39, -136]], 'Варшавская'], ['s11_4', 'Kakhovskaya', [[20, -136]], 'Каховская'], ['s11_15', 'Zyuzino', [[-12, -133]], 'Зюзино'], ['s11_13', 'Vorontsovskaya', [[-49, -133]], 'Воронцовская'], ['s11_3', 'Novatorskaya', [[-88, -112.7]], 'Новаторская'], ['s11_3', 'Prospekt_Vernadskogo', [[-110, -100.95]], ''], ['s11_3', 'Michurinsky_Prospekt', [[-113, -58]], 'Мичуринский пр-т'], ['s11_2', 'Aminyevskaya', [[-135.26, -35.74]], 'Аминьевская'], ['s11_2', 'Davydkovo', [[-145.73, -25.27]], 'Давыдково'], ['s11_3', 'Kuntsevskaya', [[-152.2, 34]], ''], // closed radial
    ['s11A', 'Delovoy_Tsentr', [[-104, 11]], ''], ['s11A_1', 'Shelepikha', [[-116, 27]], 'Шелепиха'], ['s11A_2', 'Khoroshyobskaya', [[-80, 44]], ''], ['s12_3', 'Bittsevsky_Park', [[-40, -168]], 'Битцевский парк'], ['s12_4', 'Lesoparkovaya', [[-30, -172.3]], 'Лесопарковая'], ['s12_5', 'Starokachalovskaya', [[-19, -177]], 'Ул. Старокачаловская'], ['s12_2', 'Ulitsa_Skobelevskaya', [[-28, -186]], 'Ул. Скобелевская'], ['s12_1', 'Bulvar_Adm_Ushakova', [[-45, -186]], 'Б-р Адм. Ушакова'], ['s12', 'Ulitsa_Gorchakova', [[-66, -186]], 'Ул. Горчакова'], ['s12_1', 'Buninskaya_Alleya', [[-89, -186]], 'Бунинская аллея'], ['s13', 'Timiryazevskaya', [[-25, 100]], ''], ['s13', 'Ulitsa_Milashenkova', [[-13, 100]], ''], ['s13', 'Teletsentr', [[0, 100]], ''], ['s13', 'Ulitsa_Ak_Koroleva', [[19, 100]], ''], ['s13', 'Vystavochny_Tsentr', [[31, 100]], ''], ['s13_1', 'Ulitsa_Eyzenshteyna', [[33, 103]], ''], ['s14_5', 'Vladykino', [[-11, 116.4]], ''], ['s14_5', 'Okruzhnaya', [[-20, 115.2]], ''], ['s14', 'Lihobory', [[-44, 108.4]], 'Лихоборы'], ['s14', 'Koptevo', [[-62.8, 98.7]], 'Коптево'], ['s14_5', 'Baltiiskaya', [[-74, 90.7]], 'Балтийская'], ['s14_2', 'Streshnevo', [[-82.4, 83]], 'Стрешнево'], ['s14', 'Panfilovskaya', [[-87.5, 77.5]], 'Панфиловская'], ['s14_5', 'Zorge', [[-93, 71]], 'Зорге'], ['s14_7', 'Horoshevo', [[-105.5, 50.54]], 'Хорошёво'], ['s14_5', 'Shelepikha', [[-113, 29.5]], ''], ['s14_9', 'Delovoy_Tsentr', [[-115, 21]], 'Деловой центр'], ['s14_5', 'Kutuzovskaya', [[-116.8, 7]], ''], ['s14_7', 'Luzhniki', [[-87, -78]], 'Лужники'], ['s14_7', 'Ploshad_Gagarina', [[-49, -106.2]], 'Пл. Гагарина'], ['s14_9', 'Krymskaya', [[-14, -116.2]], 'Крымская'], ['s14_8', 'Verhnie_Kotly', [[30, -113.1]], 'Верх. Котлы'], ['s14_2', 'ZIL', [[58, -101.5]], 'ЗИЛ'], ['s14_5', 'Avtozavodskaya', [[65, -97]], ''], ['s14_5', 'Dubrovka', [[83.4, -82]], ''], ['s14_5', 'Ugreshskaya', [[94.5, -69]], 'Угрешская'], ['s14', 'Novohohlovskaya', [[105.2, -51]], 'Новохохловская'], ['s14_5', 'Nizhegorodskaya', [[109.9, -40]], 'Нижегородская'], ['s14', 'Andronovka', [[114.3, -25]], 'Андроновка '], ['s14_5', 'Shosse_Entuziastov', [[115.7, -17]], ''], ['s14', 'Sokolinaya_Gora', [[116.3, 12]], 'Соколиная гора'], ['s14_7', 'Izmaylovo', [[106.7, 48]], 'Измайлово'], ['s14_5', 'Lokomotiv', [[94.2, 69.4]], 'Локомотив'], ['s14_5', 'Bulvar_Rokossovskogo', [[85.6, 80]], ''], ['s14', 'Belokamennaya', [[74.8, 90]], 'Белокаменная'], ['s14', 'Rostokino', [[60.6, 100]], 'Ростокино'], ['s14_5', 'Botanicheskiy_Sad', [[42.6, 109]], ''], ['s14_6', 'Vladykino', [[-11, 116.4]], ''], //closed radial
    ['s15_3', 'Nizhegorodskaya', [[120, -44]], 'Нижегородская'], ['s15', 'Stahanovskaya', [[132.7, -56.7]], 'Стахановская'], ['s15', 'Okskaya_Ulitsa', [[137, -68]], 'Окская улица'], ['s15_1', 'Yugo_Vostochnaya', [[143.1, -91.4]], 'Юго-восточная'], ['s15_2', 'Kosino', [[156.5, -106]], 'Косино'], ['s15_1', 'Ulitsa_Dmitrievskogo', [[165, -122]], 'Ул. Дмитриевского'], ['s15_1', 'Kosino_Ukhtomskaya', [[165, -131]], 'Лухмановская'], ['s15_1', 'Nekrasovka', [[165, -140]], 'Некрасовка'], ['s16_2', 'Sevastopol_Prospekt', [[-14, -116.2]], 'Севастопол. пр-т'], ['s16_1', 'Akademicheskaya', [[-40, -116.2]], ''], ['s16_1', 'Ulitsa_Novatorov', [[-85, -116]], ''], ['s16', 'Univer_Dr_Narodov', [[-92, -123]], 'Ун-т Дружбы Народов'], ['s16', 'Ulitsa_Gen_Tuleneva', [[-98.5, -130]], 'Ул. Генерала Тюленева'], ['s16', 'Tutchevskaya', [[-105, -137]], 'Тютчевская'], ['s16', 'Kornilovskaya', [[-112, -144]], 'Корниловская'], ['s16', 'Bachurinskaya', [[-118.5, -151]], 'Бачуринская'], ['s16_1', 'Kommunarka', [[-125, -158]], ''], ['smcd1', 'Odintsovo', [[-216, -46]], 'Одинцово (D1)'], ['smcd1', 'Баковка', [[-206.6, -31.5]], ''], ['smcd1', 'Skolkovo', [[-195, -14]], ''], ['smcd1', 'Nemchinovka', [[-185.8, 0]], ''], ['smcd1_1', 'Kuntsevskaya', [[-165, 28.5]], ''], ['smcd1_1', 'Slavyansky_Bulvar', [[-145, 10]], ''], ['smcd1_1', 'Fili', [[-128.2, 3]], ''], ['smcd1_1', 'Okruzhnaya', [[-15, 121]], ''], ['smcd1', 'Lobnya', [[-15, 175]], 'Лобня (D1)'], ['smcd2', 'Podolsk', [[28, -210]], 'Подольск (D2)'], ['smcd2', 'Silikatnaya', [[28, -203]], ''], ['smcd2', 'Ostafievo', [[28, -196]], ''], ['smcd2', 'Scherbinka', [[28, -189]], ''], ['smcd2', 'Butovo', [[28, -182]], ''], ['smcd2', 'Bitsa', [[28, -175]], ''], ['smcd2', 'Krasniy_Stroitel', [[28, -159]], ''], ['smcd2', 'Pokrovskaya', [[33, -152]], ''], ['smcd2_1', 'Tsaritsyno', [[72.9, -145]], ''], ['smcd2_1', 'Kubanskaya', [[105, -92]], ''], ['smcd2_1', 'Tekstilshchiki', [[105, -84]], ''], ['smcd2_1', 'Novohohlovskaya', [[101.5, -51]], ''], ['smcd2_1', 'Moskva_Tovarnaya', [[91.3, -36]], ''], ['smcd2_1', 'Kurskaya', [[72.5, -9]], ''], ['smcd2_1', 'Kalanchevskaya', [[60, 50]], ''], ['smcd2_1', 'Rizhskaya', [[44, 83]], ''], ['smcd2_1', 'Dmitrovskaya', [[-32, 94]], ''], ['smcd2_1', 'Streshnevo', [[-82, 87]], ''], ['smcd2_1', 'Pokrov_Streshnevo', [[-102, 76]], ''], ['smcd2_1', 'Tushinskaya', [[-102, 95]], ''], ['smcd2_1', 'Volokolamskaya', [[-164, 82]], ''], ['smcd2', 'Nahabino', [[-200, 122]], 'Нахабино (D2)'], ['smcd3', 'Krjukovo', [[-120, 150]], 'Крюково (D3)'], ['smcd3_1', 'Khovrino', [[-88, 126]], ''], ['smcd3_1', 'Petr_Razumovskaya', [[-22, 114]], ''], ['smcd3_1', 'Elektrozavodskaya', [[76, 17]], ''], ['smcd3_1', 'Aviamotornaya', [[108, -27]], ''], ['smcd3_1', 'Ryazan_Prospekt', [[145.2, -74]], ''], ['smcd3_1', 'Vykhino', [[152, -87]], ''], ['smcd3_1', 'Kosino', [[159, -104]], ''], ['smcd3_1', 'Uhtomskaya', [[160, -112]], ''], ['smcd3', 'Ljubercy-1', [[160, -120]], ''], ['smcd3', 'Panki', [[160, -130]], ''], ['smcd3', 'Tomilino', [[160, -135]], ''], ['smcd3', 'Kraskovo', [[160, -140]], ''], ['smcd3', 'Malakhovka', [[160, -150]], ''], ['smcd3', 'Udelnaya', [[160, -160]], ''], ['smcd3', 'Bykovo', [[160, -165]], ''], ['smcd3', 'Iliinskaya', [[160, -170]], ''], ['smcd3', 'Otdyh', [[160, -175]], ''], ['smcd3', 'Kratovo', [[160, -180]], ''], ['smcd3', 'Eseninskaya', [[160, -185]], ''], ['smcd3', 'Fabrichnaya', [[160, -190]], ''], ['smcd3', 'Ramenskoe', [[160, -195]], ''], ['smcd3', 'Ippodrom', [[160, -200]], 'Ипподром (D3)']];
export var MLBS = [['moskvar_t', 'mr', [], 'Москва-река', [112, -149]], ['moskvac_t', 'mc', [], 'Канал им. Москвы', [-98, 111]], ['yauza_t', 'yr', [], 'река Яуза', [61, 93]], ['svo_t', 'svo', [], 'Шереметьево', [-25, 162]], ['svo_d_t', 'svo', [], 'Белорусский', [-51, 55]], ['vko_t', 'vko', [], 'Внуково', [-155, -128]], ['vko_d_t', 'vko', [], 'Киевский', [-75, -21]], ['dme_t', 'dme', [], 'Павелецкий', [50, -61]], ['dme_d_t', 'dme', [], 'Домодедово', [60, -200]], ['mkad', 'mkad1', [], 'МКАД', [-185, 45]], ['mkad', 'mkad2', [], 'МКАД', [-144, -48]], ['mkad', 'mkad3', [], 'МКАД', [70, -172]], ['mkad', 'mkad4', [], 'МКАД', [152, -12]], ['mkad', 'mkad5', [], 'МКАД', [90, 110]], ['mkad', 'mkad6', [], 'МКАД', [0, 150]]];
export var MLGN = {
    r1: 'Сокольническая линия (красная)',
    r2: 'Замоскворецкая линия (зелёная)',
    r3: 'Арбатско-Покровская линия (синяя)',
    r4: 'Филёвская линия (голубая)',
    r4A: 'Филёвская линия (голубая)',
    r5: 'Кольцевая линия (коричневая)',
    r6: 'Калужско-Рижская линия (оранжевая)',
    r7: 'Таганско-Краснопресненская линия (фиолетовая)',
    r8: 'Калининская линия (жёлтая)',
    r9: 'Серпуховско-Тимирязевская линия (серая)',
    r10: 'Люблинско-Дмитровская линия (салатовая)',
    r11: 'Большая кольцевая линия (бирюзовая)',
    r11A: 'Большая кольцевая линия (бирюзовая)',
    r12: 'Бутовская линия (серо-голубая)',
    r13: 'Московский монорельс',
    r14: 'Московское центральное кольцо (МЦК)',
    r15: 'Некрасовская линия (розовая)',
    r16: 'Троицкая линия (коричневая)',
    rmcd1: 'МЦД-1',
    rmcd2: 'МЦД-2',
    rmcd3: 'МЦД-3'
};

// BFS breadth first search algorithm
// https://question-it.com/questions/158570/nahozhdenie-kratchajshego-puti-v-dvumernom-massive-javascript
//
// var m = [
//   [ 'A', '0', [[8,1]], 'B', 'A' ],
//   [ 'A', '1', [[9,1]], 'B', 'B' ],
//   [ 'A', '2', [[2,1]], 'A', 'A' ],
//   [ 'B', '0', [[3,1]], 'A', 'A' ],
//   [ 'B', '1', [[5,7]], 'A', 'A' ],
//   [ 'B', '2', [[4,1]], 'A', 'A' ]];
//
// var inst = [['2,1'], ['3,1'], ['5,7']];
//
// BFS(m, inst, makeind(m, 'A_0'), makeind(m, 'B_2')) // interchanges

export function makeid(a){ return a[0] + '_' + a[1]; }

export function maketip(a){ return a[0].split('_')[0]; }

export function maketipn(a){ return a[0].split('_')[0].slice(1); }

export function makeind(m, id){ return m.indexOf(m.filter(function(item){ return makeid(item) == id; }).pop()); }

export function makecrds(m){ return m.map(function(a){ return a[2].map(function(b){ return String(b); }); }); }

export function inarray(m, a){ return m.filter(function(b){ return String(a) == String(b); }).length; }

export function findchilds(m, inst, current, stops){
    var its = inst.filter(function(a){ return a.indexOf(String(m[current][2]))>-1; });
    var stIts = m.filter(function(a){ return makeid(a) != makeid(m[current]) && its.filter(function(b){ return b.indexOf(String(a[2]))>-1; }).length });
    var stItsi = stIts.map(function(a){ return makeind(m, makeid(a)); });
    var avails = [ current - 1, current + 1 ].concat(stItsi);
    var valids = avails.filter(function(cell){ return (cell >= 0 && cell < m.length); });
    var vertexes = valids.filter(function(cell){
//      console.log(current, cell, makeid(m[current]), makeid(m[cell]), String(m[cell][2]), String(m[current][2]),
//      stops.indexOf(cell) == -1, maketip(m[cell]) == maketip(m[current]), String(m[cell][2]) == String(m[current][2]),
//      its.filter(function(a){ return a.indexOf(String(m[cell][2]))>-1 && a.indexOf(String(m[current][2]))>-1; }).length, its);
            return stops.indexOf(cell) == -1 &&
                (maketip(m[cell]) == maketip(m[current])) ||
                String(m[cell][2]) == String(m[current][2]) ||
                (its.filter(function(a){ return a.indexOf(String(m[cell][2]))>-1 && a.indexOf(String(m[current][2]))>-1; }).length)
        }
    );
    return vertexes;
}
export function buildpath(m, tree, to){
    var path = [m[to]];
    var parent = tree[to];
    while(parent != undefined){
        path.push(m[parent]);
        parent = tree[parent];
    }
    return path.reverse();
}
// m - list of vertexes (stations)
// inst - list of interchange stations
// from - start index of m
// to - destination index of m
// stops - list if vertexes where search stop (stations under constructed)
export function BFS(m, inst, from, to, stops){
    var tree = [];
    var visited = [];
    var q = [];
    q.push(from);
    while(q.length){
        var current = q.shift();
        visited.push(current.toString());
        if(current.toString() == to.toString()) return buildpath(m, tree, to);
        var childs = findchilds(m, inst, current, stops||[]);
        for(var c in childs){
            if(visited.indexOf(childs[c].toString()) == -1){
                tree[childs[c]] = current;
                if(childs[c] == to) q.unshift(childs[c]);
                else q.push(childs[c]);
            }
        }
    }
    return [];
}

//
// HTML5 SVG vector map and image viewer library with Proj4js transformations
//
// https://github.com/egaxegax/dbcartajs.git
// egax@bk.ru, 2015. b230522.
//
export function dbCartaSvg(cfg) {
    var SVG_NS = 'http://www.w3.org/2000/svg',
        self = this;
    //
    // Set new obj key/value
    //
    self.extend = function(dst, src){
        if (!src) {
            src = dst;
            dst = self;
        }
        for(var prop in src)
            if(src[prop] !== undefined)
                dst[prop] = src[prop];
        return dst;
    };
    //
    // Set DOM obj attribute
    //
    self.attr = function(dst, src){
        if (!src) {
            src = dst;
            dst = self;
        }
        for(var prop in src)
            if (src[prop]) dst.setAttribute(prop, src[prop]);
        return dst;
    };
    //
    // Add SVG figure (polygon, path, ...)
    //
    self.append = function(parent, name, at){
        if (!at) {
            at = name;
            name = parent;
            parent = self.vp || self.root;
        }
        var el = document.createElementNS(SVG_NS, name);
        if (parent) parent.appendChild(el);
        self.attr(el, at);
        return el;
    };
    // Constructor config {
    //   id: parent id to add new
    //   svgRoot: exists SVG dom id
    //   svgViewport: exists viewport (g tag) dom id
    //   width, height: map size
    //   draggable: move map by cursor
    //   bg: map bgcolor
    //   boundbg: bgcolor for Sphere bound
    //   scalebg: bgcolor for paintBar
    //   sbar: show scale bar?
    //   sbarpos: bar pos {left|right}
    //   sbarsize: bar size {height/6}
    // }
    cfg = cfg||{};
    // Use exists svg or create new
    //   svgRoot: svg root node (not transform)
    //   svgViewport: g viewport node (rotate, scale, translate)
    if(cfg.svgRoot && cfg.svgViewport) { // use exists svg container
        self.root = cfg.svgRoot;
        self.vp = cfg.svgViewport;
        self.attr(self.root, {
            width: cfg.width,
            height: cfg.height
        });
    } else { // add new
        var cont = document.createElement('div'),
            el = document.getElementById(cfg.id);
        if (el) el.appendChild(cont);
        self.root = self.append(cont, 'svg', {
            version: '1.1',
            xlmns: SVG_NS,
            width: cfg.width ? cfg.width : el.offsetWidth,
            height: cfg.height ? cfg.height : el.offsetWidth / 2.0
        });
        self.vp = self.append(self.root, 'g', {});
    }
    self.attr(self.vp, {
        width: self.root.getAttribute('width'),
        height: self.root.getAttribute('height')
    });
    self.root.style.backgroundColor = cfg.bg||'none';
    //
    // Add props
    //
    self.extend(self, {
        cfg: {
            draggable: cfg.draggable == undefined ? true : cfg.draggable,
            boundbg: cfg.boundbg || 'rgb(64,80,80)',
            scalebg: cfg.scalebg || 'rgba(200,200,200,0.3)',
            sbar: cfg.sbar == undefined ? true : cfg.sbar,
            sbarpos: cfg.sbarpos || 'right',
            sbarsize: cfg.sbarsize||4
        },
        // Internal vars
        m: {
            delta: self.root.getAttribute('width') / 360.0,
            halfX: self.root.getAttribute('width') / 2.0,
            halfY: self.root.getAttribute('height') / 2.0,
            rotate: 0,
            scale: 1,
            offset: [0, 0],
            touches: [],
            dtouch: 0
        },
        //
        // Proj4 defs
        //
        projlist: function(){
            if ('Proj4js' in window){
                return {
                    0: '+proj=longlat',
                    101: '+proj=merc +units=m',
                    102: '+proj=mill +units=m',
                    201: '+proj=laea +units=m',
                    202: '+proj=nsper +units=m +h=40000000',
                    203: '+proj=ortho +units=m',
                    204: '+proj=moll +units=m'
                };
            }
            return {};
        }(),
        projload: {},
        project: 0,
        //
        // Convert pixels to points
        //
        canvasXY: function(ev) {
            var node = cont,
                pts = [ev.clientX, ev.clientY];
            if (!/WebKit/.test(navigator.userAgent)) {
                pts[0] += window.pageXOffset;
                pts[1] += window.pageYOffset;
            }
            while (node) {
                pts[0] -= node.offsetLeft - node.scrollLeft;
                pts[1] -= node.offsetTop - node.scrollTop;
                node = node.offsetParent;
            }
            return pts;
        },
        //
        // Return meridians coords
        //
        createMeridians: function() {
            var lonlat = [];
            var x = -180,
                scale_x = 180;
            while (x <= scale_x) {
                var lon = [];
                var y = -90;
                while (y <= 90) {
                    lon.push([x, y]);
                    y += (y == -90 || y == 85 ? 5 : 85); // mercator fix
                }
                lonlat.push( lon );
                x += 30;
            }
            var y = -90;
            while (y <= 90) {
                var x = -180,
                    prev = [x, y];
                while (x < scale_x) {
                    x += 90;
                    var lat = [prev, [x,y]],
                        prev = [x, y];
                    lonlat.push( lat );
                }
                y += 30;
            }
            return lonlat;
        },
        // - transforms ---------------------------------
        //
        // Rotate map on ANGLE in degrees
        //
        rotateCarta: function(angle) {
            self.m.rotate += angle;
            self.scaleCarta(self.m.scale);
        },
        //
        // Change map scale to SCALE
        //
        scaleCarta: function(scale) {
            var centerof = self.centerOf();
            var cx = centerof[0]/scale - centerof[0],
                cy = centerof[1]/scale - centerof[1];
            var offx = self.m.offset[0] + cx,
                offy = self.m.offset[1] + cy;
            self.attr(self.vp, {
                transform: 'rotate(' + self.m.rotate + ' ' + centerof[0] + ' ' + centerof[1] + ') scale(' + scale + ') translate(' + offx + ',' + offy + ')'
            });
            self.m.scale = scale;
            if('clscale' in window) clscale();
        },
        //
        // Center map by points PTS
        //
        centerCarta: function(pts) {
            var scale = self.m.scale;
            var centerof = self.centerOf();
            var dx = centerof[0] - pts[0],
                dy = centerof[1] - pts[1];
            var offx = centerof[0]/scale - pts[0],
                offy = centerof[1]/scale - pts[1];
            var mx = (self.m.mpts ? self.m.mpts[0] : 0),
                my = (self.m.mpts ? self.m.mpts[1] : 1);
            offx -= mx;
            offy -= my;
            if(self.chkPts([ offx, offy ])) {
                self.attr(self.vp, {
                    transform: 'rotate(' + self.m.rotate + ' ' + centerof[0] + ' ' + centerof[1] + ') scale(' + scale + ') translate(' + offx + ',' + offy + ')'
                });
                self.m.offset = [ dx - mx, dy - my ];
            }
        },
        //
        // Select EV.TARGET obj under mouse cursor like html MAP-AREA
        // with AT attributes
        //
        doMap: function(ev, at) {
            self.mousemove(ev[0] || ev);
            if (!self.m.pmap) {
                var elems = [];
                if(!ev.length) {
                    ev = [ev];
                }
                if(!at.length) {
                    at = [at];
                }
                for(var i=0; i<ev.length; i++) {
                    var el = ev[i].target,
                        ats = at[i],
                        mattr = {};
                    if(!el || !ats) continue;
                    for (var prop in ats) { // save current
                        mattr[prop] = el.getAttribute(prop);
                    }
                    if (!mattr['transform']) mattr['transform'] = 'scale(1)';
                    self.attr(el, ats); // set new
                    elems.push({
                        el: el,
                        attr: mattr
                    });
                };
                self.m.pmap = {
                    elems: elems
                };
            };
            self.m.pmap.i = 1; // set counter
        },
        // - paints ---------------------------------
        //
        // Draw Sphere bounds by radius
        //
        paintBound: function() {
            var centerof = self.centerOf();
            var rx, ry, proj = self.initProj();
            // spherical radii
            switch (String(self.project)) {
                case '201': rx = 2.0; break;
                case '202': rx = Math.sqrt((proj.p15 - 1.0)/(proj.p15 + 1.0)); break;
                case '203': rx = 1.0; break;
                case '204': ry = 1.4142135623731; rx = 2.0 * ry; break;
            }
            if (rx) {
                return self.append('ellipse', {
                    cx: centerof[0],
                    cy: centerof[1],
                    rx: rx * self.m.delta * 180/Math.PI,
                    ry: (ry || rx) * self.m.delta * 180/Math.PI,
                    fill: self.cfg.boundbg
                });
            }
        },
        //
        // Draw left/right bar with scale buttons
        //
        paintBar: function() {
            if (!self.cfg.sbar) return;
            var sz = self.sizeOf(),
                cw = sz[2],
                ch = sz[3];
            var h = ch/self.cfg.sbarsize,
                w = h/2,
                tleft = (self.cfg.sbarpos == 'left') ? w/10 : cw - w - w/10,
                ttop = ch/2 - h/2,
                d = w/10; // + - size
            var cols = 20, // arc col vertex
                anglestep = Math.PI/cols;
            var mx, my; // last pos
            var pts = [];
            // plus round
            for (var i=-6; i<=cols+6; i++)
                pts.push(mx = (w/2 * Math.cos(i * anglestep)), my = (-w/2 * Math.sin(i * anglestep)));
            pts.push(-w/5, -d/2); pts.push(-d/2, -d/2); pts.push(-d/2, -w/5);
            pts.push(d/2, -w/5);  pts.push(d/2, -d/2);  pts.push(w/5, -d/2);
            pts.push(w/5, d/2);   pts.push(d/2, d/2);   pts.push(d/2, w/5);
            pts.push(-d/2, w/5);  pts.push(-d/2, d/2);  pts.push(-w/5, d/2);
            pts.push(-w/5, -d/2); pts.push(mx, my);
            // minus round
            for (var i=-6; i<=-6; i++)
                pts.push(-w/2 * Math.cos(i * anglestep), h/2 + w/2 * Math.sin(i * anglestep));
            pts.push(-w/5, h/2 - d/2); pts.push(w/5, h/2 - d/2);
            pts.push(w/5, h/2 + d/2);  pts.push(-w/5, h/2 + d/2);
            pts.push(-w/5, h/2 - d/2);
            for (var i=-6; i<=cols+6; i++)
                pts.push(mx = (-w/2 * Math.cos(i * anglestep)), my = (h/2 + w/2 * Math.sin(i * anglestep)));
            // home round
            for (var i=0; i<=cols; i++)
                pts.push(w/6 * Math.cos(i * 2.0 * anglestep), h/2 - h/4 + w/6 * Math.sin(i * 2.0 * anglestep));
            pts.push(mx, my);
            var dx = tleft + w/2,
                dy = ttop + h/4,
                path = 'M ' + pts[0] + ' ' + pts[1] + ' L ' + pts.join(' ') + ' z';
            return self.append(self.root, 'path', {
                fill: self.cfg.scalebg,
                d: path,
                transform: 'translate (' + dx + ',' + dy + ')'
            });
        },
        // - sizes ----------------------------
        //
        // Return sizes of map in pixels
        //
        sizeOf: function() {
            return [0, 0, self.root.getAttribute('width'), self.root.getAttribute('height')];
        },
        centerOf: function() {
            var rect = self.sizeOf();
            return [ (rect[0] + rect[2]) / 2.0,
                (rect[1] + rect[3]) / 2.0 ];
        },
        resize: function(w, h) {
            self.attr(self.root, {
                width: w,
                height: h
            });
            self.attr(self.vp, {
                width: w,
                height: h
            });
            self.m.delta = w / 360;
            self.m.halfX = w / 2.0;
            self.m.halfY = h / 2.0;
        },
        //
        // Return visible borders in degrees
        //
        viewsizeOf: function() {
            var rect = self.sizeOf();
            var left = self.fromPoints([rect[0], rect[1]], false),
                leftproj = self.fromPoints([rect[0], rect[1]], !self.isSpherical()),
                right = self.fromPoints([rect[2], rect[3]], false),
                rightproj = self.fromPoints([rect[2], rect[3]], !self.isSpherical());
            var mleft = left[0], mtop = leftproj[1],
                mright = right[0], mbottom = rightproj[1];
            return [mleft, mtop, mright, mbottom];
        },
        viewcenterOf: function() {
            var rect = self.viewsizeOf();
            return [ (rect[0] + rect[2]) / 2.0,
                (rect[1] + rect[3]) / 2.0 ];
        },
        // - checks ------------------------
        //
        // Check click on scale bar and do action
        //
        chkBar: function(pts, doaction) {
            if (!self.cfg.sbar) return;
            var sz = self.sizeOf(),
                cw = sz[2],
                ch = sz[3];
            var h = ch/self.cfg.sbarsize,
                w = h/2,
                tleft = (self.cfg.sbarpos == 'left') ? w/10 : cw - w - w/10,
                ttop = ch/2 - h/2,
                d = w/10;
            var mx = pts[0] - tleft,
                my = pts[1] - ttop;
            if (mx > 0 && mx < w && my > 0 && my < h) { // scale
                if (!doaction) return true;
                var zoom = (self.m.scale > 1 ? self.m.scale : 2-1/self.m.scale);
                if (my > h/2 - w/6 && my < h/2 + w/6) { // home
                    return;
                } else if (my > 0 && my < h/2) { // plus
                    if (zoom < 50) zoom += 0.5;
                } else if (my > h/2 && my < h) { // minux
                    if (zoom > -18) zoom -= 0.5;
                }
                zoom = (zoom > 1 ? zoom : 1/(2-zoom));
                self.scaleCarta(zoom);
//        if (zoom == 1) {
//          self.centerCarta(self.centerOf());
//        }
            }
        },
        chkPts: function(pts) {
            return (pts && !isNaN(pts[0]) && !isNaN(pts[1]));
        },
        // - reproject ------------------------
        //
        // Change project to NEW_PROJECT and center by visible centre
        //
        changeProject: function(new_project) {
            // curr. centerof
            if (self.isTurnable()) {
                var proj = self.initProj();
                viewcenterof = [ proj.long0 * 180/Math.PI, proj.lat0 * 180/Math.PI ];
            } else {
                var viewcenterof = self.fromPoints(self.centerOf(), true);
            }
            // new centerof
            if (self.isTurnable(new_project)) {
                self.centerCarta(self.centerOf());
                self.initProj(new_project, ' +lon_0=' + viewcenterof[0] + ' +lat_0=' + viewcenterof[1]);
            } else {
                self.initProj(new_project, ' +lon_0=0 +lat_0=0');
                var centerof = self.toPoints(viewcenterof, true);
                if (!self.chkPts(centerof)) centerof = self.centerOf();
                self.centerCarta(centerof);
            }
        },
        //
        // Change project. to PROJECT with DEFS (see Proj4js proj. definitions)
        // If no args return current projection info (Proj4js.Proj obj.)
        //
        initProj: function(project, defs) {
            if ('Proj4js' in window) {
                if (project !== undefined) {
                    if (defs == undefined) {
                        defs = project;
                        project = self.project;
                    }
                    var old_defs = Proj4js.defs[String(project)],
                        new_defs = self.projlist[project] + (defs || '');
                    self.m.doreload = (self.project != project) || (old_defs != new_defs); // recalc points?
                    self.project = project;
                    Proj4js.defs[String(project)] = new_defs;
                }
                if (String(self.project) in Proj4js.defs) {
                    self.projload['epsg:4326'] = new Proj4js.Proj('epsg:4326');
                    self.projload[String(self.project)] = new Proj4js.Proj(String(self.project));
                    return self.projload[String(self.project)];
                }
            }
        },
        isSpherical: function(project) {
            project = project || self.project;
            return (project > 200 && project < 300);
        },
        isTurnable: function(project) {
            project = project || self.project;
            return (project == 202 || project == 203);
        },
        //
        // Convert COORDS degrees to points
        // Use projection transform. DOTRANSFORM [0|1]
        //
        toPoints: function(coords, dotransform) {
            var m = coords;
            if (dotransform && self.project != 0) {
                if (!(coords = self.transformCoords('epsg:4326', String(self.project), coords))) return;
                else if (!coords[2]) return; //backside filter
            }
            var pts = [ coords[0] * self.m.delta + self.m.halfX,
                -coords[1] * self.m.delta + self.m.halfY ];
            if (m[2]) pts.push(m[2]); // bezier flag
            return pts;
        },
        //
        // Convert PTS points to degrees
        // Use projection transform. DOTRANSFORM [0|1] and matrix transform. DONTSCALE [0|1]
        //
        fromPoints: function(pts, dotransform, dontscale) {
            if (dontscale) { // dont use matrix transformations
                var coords = [ (pts[0] - self.m.halfX) / self.m.delta,
                    -(pts[1] - self.m.halfY) / self.m.delta ];
            } else {
                var coords = [ (pts[0]/self.m.scale - self.m.halfX/self.m.scale - self.m.offset[0]) / self.m.delta,
                    -(pts[1]/self.m.scale - self.m.halfY/self.m.scale - self.m.offset[1]) / self.m.delta ];
            }
            if (dotransform && self.project != 0 && coords[0] != 0 && coords[1] != 0) {
                if (!(coords = self.transformCoords(String(self.project), 'epsg:4326', coords))) return;
            }
            return coords;
        },
        //
        // Return spherical arc between CRD1 and CRD2 in degrees
        //
        distance: function(coord1, coord2) {
            var x = coord1[0] * Math.PI/180.0,
                y = coord1[1] * Math.PI/180.0,
                x1 = coord2[0] * Math.PI/180.0,
                y1 = coord2[1] * Math.PI/180.0;
            return Math.acos(Math.cos(y) * Math.cos(y1) * Math.cos(x - x1) + Math.sin(y) * Math.sin(y1)) * 180.0/Math.PI;
        },
        //
        // Interpolate (and convert to points if DOPOINTS) coords with STEP in degrees
        //
        interpolateCoords: function(coords, dopoints, step) {
            var i, pts, interpol_pts = [];
            for (var j in coords) {
                if (!coords[j]) {
                    continue;
                } else if (!i || !step) {
                    if (pts = (dopoints ? self.toPoints(coords[j], true) : coords[j]))
                        interpol_pts.push(pts);
                } else {
                    var x = coords[i][0],
                        y = coords[i][1],
                        x1 = coords[j][0],
                        y1 = coords[j][1];
                    var d = self.distance([x, y], [x1, y1]),
                        scalestep = 1;
                    if (d > step)
                        scalestep = parseInt(d / step);
                    var _x = x, _y = y;
                    for (var k=0; k<scalestep; k++) {
                        _x += (x1 - x) / scalestep;
                        _y += (y1 - y) / scalestep;
                        if (pts = (dopoints ? self.toPoints([_x, _y], true) : [_x, _y]))
                            interpol_pts.push(pts);
                    }
                }
                i = j;
            }
            return interpol_pts;
        },
        //
        // Reproject COORDS from SOURCE to DEST proj4 string definition
        //
        transformCoords: function(sourcestr, deststr, coords) {
            if ('Proj4js' in window) {
                var sourceproj = self.projload[sourcestr],
                    destproj = self.projload[deststr];
                if (destproj.projName == 'longlat') {
                    coords[0] = sourceproj.a * coords[0] * Proj4js.common.D2R;
                    coords[1] = sourceproj.a * coords[1] * Proj4js.common.D2R;
                }
                var sourcept = new Proj4js.Point(coords[0], coords[1]);
                var destpt = Proj4js.transform(sourceproj, destproj, sourcept);
                if (!isNaN(destpt.x) && !isNaN(destpt.y)) {
                    if (sourceproj.projName == 'longlat') {
                        return [ destpt.x / destproj.a * Proj4js.common.R2D,
                            destpt.y / destproj.a * Proj4js.common.R2D,
                            !isNaN(destpt.z) ];
                    } else {
                        return [ destpt.x, destpt.y ];
                    }
                }
            } else
                return coords;
        },
        //
        // Return new PTS rotated around Z-axis with ANGLE relative to CENTEROF
        // used for mouse events
        //
        rotatePts: function(pts, angle, centerof) {
            var roll = angle * Math.PI/180,
                x = pts[0], y = pts[1], cx = centerof[0], cy = centerof[1],
                r = Math.sqrt((cx - x) * (cx - x) + (y - cy) * (y - cy));
            if (r > 0) {
                var a = Math.acos((cx - x) / r);
                if (y < cy) a = 2.0 * Math.PI - a;
                pts = [ cx - r * Math.cos(roll + a),
                    cy + r * Math.sin(roll + a) ];
            }
            return pts;
        },
        savetoimage: function() {
            if (self.cfg.sbar) self.cfg.sbar.setAttribute('fill', 'none');
            var xml  = new XMLSerializer().serializeToString(self.root),
                data = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(xml))),
                img  = new Image();
            if (self.cfg.sbar) self.cfg.sbar.setAttribute('fill', self.cfg.scalebg);
            img.src = data;
            img.onload = function() {
                var a = document.createElement('a');
                a.download = 'image.svg';
                a.href = data;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
            };
        },
        // - handlers -----------------------------
        mousemove: function(ev) {
            var spts = self.canvasXY(ev),
                pts = self.rotatePts(spts, self.m.rotate, self.centerOf());
            if (self.m.mpts && self.cfg.draggable && !self.isTurnable()) {
                var centerof = self.centerOf();
                self.centerCarta([ centerof[0] - pts[0]/self.m.scale, centerof[1] - pts[1]/self.m.scale ]);
            }
            if (self.m.pmap) {
                if (self.m.pmap.i === 0) {
                    for(var i=0; i<self.m.pmap.elems.length; i++) {
                        self.attr(self.m.pmap.elems[i].el, self.m.pmap.elems[i].attr);
                    }
                    delete self.m.pmap;
                } else
                    self.m.pmap.i = 0;
            }
        },
        mousedown: function(ev) {
            if (ev.preventDefault) ev.preventDefault(); // skip events
            var spts = self.canvasXY(ev),
                pts = self.rotatePts(spts, self.m.rotate, self.centerOf());
            if (self.m.mbar = self.chkBar(spts)) return; // if bar
            if (self.isTurnable()) { // proj.center for spherical turn
                var dst = self.fromPoints(pts, true);
                if(dst){
                    var proj = self.initProj();
                    self.m.mcenterof = [ proj.long0 * 180/Math.PI, proj.lat0 * 180/Math.PI, proj.h ];
                }
                self.m.mpts = pts;
            } else { // for drag
                self.m.mpts = [
                    pts[0]/self.m.scale - self.m.offset[0],
                    pts[1]/self.m.scale - self.m.offset[1] ];
            }
        },
        mouseup: function(ev) {
            var spts = self.canvasXY(ev),
                pts = self.rotatePts(spts, self.m.rotate, self.centerOf());
            if (self.m.mbar) { // bar
                self.chkBar(spts, true);
            } else { //turn
                if (self.m.mcenterof && self.isTurnable()) {
                    var centerof = self.centerOf();
                    var mpts = [
                        centerof[0] - pts[0] + (self.m.mpts ? self.m.mpts[0] : 0),
                        centerof[1] - pts[1] + (self.m.mpts ? self.m.mpts[1] : 0) ];
                    var dst = self.fromPoints(mpts, false, self.isTurnable());
                    self.initProj(' +h=' + self.m.mcenterof[2] + ' +lon_0=' + (self.m.mcenterof[0] + dst[0]) + ' +lat_0=' + (self.m.mcenterof[1] + dst[1]));
                    if ('draw' in window) draw();
                }
            }
            delete self.m.mpts;
            delete self.m.mcenterof;
        }
    });
    // - root events -----------------------------
    self.extend(self.root, {
        mousewheel: function(ev, dlt) {
            ev.preventDefault();
            var delta = 0;
            if (ev.wheelDelta) { // WebKit / Opera / Explorer 9
                delta = ev.wheelDelta / 150;
            } else if (ev.detail) { // Firefox
                delta = -ev.detail / 4;
            } else if (ev.deltaY) { // Firefox 84
                delta = -ev.deltaY / 6
            } else if (dlt) { // touched
                delta = dlt / 10;
            }
            var zoom = (self.m.scale > 1 ? self.m.scale : 2-1/self.m.scale);
            zoom += delta * 0.25;
            zoom = (zoom > 1 ? zoom : 1/(2-zoom));
            self.scaleCarta(zoom);
        },
        touchmove: function(ev) {
            ev.preventDefault(); // prevent window scroll
            var touches = ev.changedTouches;
            if (self.m.touches.length == 1) {
                self.mousemove(touches[touches.length - 1]);
            } else if (self.m.touches.length == 2) {
                for (var i=0; i<touches.length; i++) {
                    for (var j=0; j<self.m.touches.length; j++) {
                        if (self.m.touches[j].identifier == touches[i].identifier)
                            self.m.touches[j] = touches[i];
                    }
                }
                var a = self.canvasXY(self.m.touches[0]),
                    b = self.canvasXY(self.m.touches[1]);
                var d = Math.sqrt( Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2) );
                if (d && self.m.dtouch) {
                    self.root.mousewheel(ev, d - self.m.dtouch);
                }
                self.m.dtouch = d;
            }
        },
        touchstart: function(ev) {
            var touches = ev.changedTouches;
            for (var i=0; i<touches.length; i++)
                self.m.touches.push(touches[i]);
            if (touches.length)
                self.mousedown(touches[0]);
        },
        touchend: function(ev) {
            var touches = ev.changedTouches;
            for (var i=0; i<touches.length; i++) {
                for (var j=0; j<self.m.touches.length; j++) {
                    if (self.m.touches[j].identifier == touches[i].identifier)
                        self.m.touches.splice(j, 1);
                }
            }
            if (self.m.touches.length) {
                self.m.touches = [];
                self.m.dtouch = 0;
            } else
                self.mouseup(touches[touches.length - 1]);
        },
        onmousemove: function(ev) {
            self.mousemove(ev);
        },
        onmousedown: function(ev) {
            self.mousedown(ev);
        },
        onmouseup: function(ev) {
            self.mouseup(ev);
        }
    });
    self.root.addEventListener('wheel', self.root.mousewheel, false);
    self.root.addEventListener('mousewheel', self.root.mousewheel, false);
    self.root.addEventListener('DOMMouseScroll', self.root.mousewheel, false); // firefox
    self.root.addEventListener('touchmove', self.root.touchmove, false);
    self.root.addEventListener('touchstart', self.root.touchstart, false);
    self.root.addEventListener('touchend', self.root.touchend, false);
    self.root.addEventListener('touchleave', self.root.touchend, false);

    self.cfg.sbar = self.paintBar();
    return self;
}

var mopt = {};
// peresadki click
function clchange(sel){
    var o=sel.options[sel.selectedIndex], s=o.innerHTML;
    o.innerHTML = (s.indexOf('\u2611')>-1 ? '&emsp;' : '\u2611')+' '+s.slice(s.search(' '));
    sel.selectedIndex = 0;
}
// diagonal size
function mds(o) {
    return Math.sqrt(DC.sizeOf()[2]*DC.sizeOf()[2]+DC.sizeOf()[3]*DC.sizeOf()[3])/15*o/100;
}
// find nodes
function find(str){
    return [].slice.call(DC.root.querySelectorAll(str));
}
function draw() {
    function route(o)    { return DC.extend({class: 'route', bg: 'none', join: 'round', cap: 'round', width: 7, anchor: ['start', 'middle']}, o||{}); };
    function route_ext(o){ return route(DC.extend({width: 3, cap: 'butt', dash: [6,4]}, o||{})); };
    function river(o)    { return route(DC.extend({fg: '#daebf4', cap: 'round', labelcolor: '#5555ff'}, o||{})); };
    function rail(o)     { return route(DC.extend({fg: '#ccc', width: 2}, o||{})); };
    function rail_d(o)   { return rail(DC.extend({fg: '#eee', dash: [8,7]}, o||{})); };
    function label(o)    { return DC.extend({class: 'label', labelcolor: '#aaa', anchor: ['start', 'top']}, o||{}); };
    function station(o)  { return DC.extend({class: 'station', bg: '#f5f5dc', size: 4, width: 1}, o||{}); };
    function st_mck(o)   { return station(DC.extend({size: 3, labelcolor: 'gray', bg: o['fg']}, o)); };
    function st_mcd(o)   { return station(DC.extend({size: 2, labelcolor: 'gray', bg: o['fg']}, o)); };
    function inch(o)     { return route(DC.extend({fg: '#ccc', cap: 'round', width: 11}, o||{})); };
    function inch_d(o)   { return inch(DC.extend({fg: '#fff', width: 7}, o||{})); };
    function inch_ext(o) { return inch(DC.extend({fg: '#eee', dash:[3,3], width: 2}, o||{})); };
    function inch_mck(o) { return inch(DC.extend({fg: '#ccc', width: 1}, o||{})); };
    function inch_mcd(o) { return inch(DC.extend({fg: '#ccc', width: 1}, o||{})); };
    function inch_out(o) { return inch(DC.extend({fg: '#ccc', width: 1}, o||{})); };
    function inst_mck(o) { return st_mck(DC.extend({size: 3, labelcolor: o['fg']}, o)); };
    function inst_mcd(o) { return st_mcd(DC.extend({size: 2, labelcolor: o['fg']}, o)); };
    function inst(o)     { return station(DC.extend({size: 4, labelcolor: o['fg'], bg: o['fg']}, o)); };
    function inst_d(o)   { return inst(DC.extend({size: 3, width: 2}, o||{})); };
    // lines
    DC.extend(mopt, {
        r1:        route(    {fg: '#ed1b35'}),
        r1_ext:    route_ext({fg: '#ed1b35'}),
        r2:        route(    {fg: '#44b85c'}),
        r2_ext:    route_ext({fg: '#44b85c'}),
        r3:        route(    {fg: '#0078bf'}),
        r3_ext:    route_ext({fg: '#0078bf'}),
        r4:        route(    {fg: '#19c1f3'}),
        r4A:       route(    {fg: '#19c1f3'}),
        r5:        route(    {fg: '#894e35'}),
        r6:        route(    {fg: '#f58631'}),
        r6_ext:    route_ext({fg: '#f58631'}),
        r7:        route(    {fg: '#8e479c'}),
        r7_ext:    route_ext({fg: '#8e479c'}),
        r8:        route(    {fg: '#ffcb31'}),
        r8_ext:    route_ext({fg: '#ffcb31'}),
        r9:        route(    {fg: '#a1a2a3'}),
        r10:       route(    {fg: '#b3d445'}),
        r10_ext:   route_ext({fg: '#b3d445'}),
        r11:       route(    {fg: '#79cdcd'}),
        r11_ext:   route_ext({fg: '#79cdcd'}),
        r11A:      route(    {fg: '#79cdcd'}),
        r12:       route(    {fg: '#acbfe1'}),
        r12_ext:   route_ext({fg: '#acbfe1'}),
        r13:       route(    {fg: '#2c87c5', width: 2}),
        r14:       rail(     {fg: '#f76093', width: 2}),
        r14_d:     rail_d(   {width:2}),
        r15:       route(    {fg: '#de62be'}),
        r16:       route(    {fg: '#554d26'}),
        r16_ext:   route_ext({fg: '#554d26'}),
        inch:      inch(),
        inch_d:    inch_d(),
        inch_ext:  inch_ext(),
        inch_mck:  inch_mck(),
        inch_mcd:  inch_mcd(),
        inch_out:  inch_out(),
        mkad:      label(    {fg: 'rgb(210,230,255)', bg: '#fff', anchor: ['middle', 'middle']}),
        moskvar:   river(    {width: 15}),
        moskvac:   river(    {width: 5}),
        strogino:  river(    {width: 5}),
        vodootvod: river(    {width: 5}),
        yauza:     river(    {width: 5}),
        nagatino:  river(    {width: 6}),
        grebnoy:   river(    {width: 3}),
        moskvar_t: river(    {rotate: 48,  anchor: ['start', 'middle']}),
        moskvac_t: river(    {rotate: -90, anchor: ['start', 'middle']}),
        yauza_t:   river(    {rotate: 45,  anchor: ['start', 'top']}),
        t:         rail(),
        t_d:       rail_d(),
        rmcd1:     rail(     {fg: '#fa842f'}),
        rmcd1_d:   rail_d(),
        rmcd2:     rail(     {fg: '#e29ec0'}),
        rmcd2_d:   rail_d(),
        rmcd3:     rail(     {fg: '#e17a4b'}),
        rmcd3_d:   rail_d(),
        svo_t:     label(    {anchor: ['end',   'middle']}),
        svo_d_t:   label(    {anchor: ['end',   'top']}),
        vko_t:     label(    {anchor: ['start', 'middle']}),
        vko_d_t:   label(    {anchor: ['middle','top']}),
        dme_t:     label(    {anchor: ['start', 'middle']}),
        dme_d_t:   label(    {anchor: ['middle','top']})
    });
    // stations
    DC.extend(mopt, {
        s1:        station( {fg: mopt['r1'].fg,    anchor: ['start', 'middle']}),
        s1_1:      inst(    {fg: mopt['r1'].fg,    anchor: ['start', 'middle']}),
        s1_2:      inst(    {fg: mopt['r1'].fg,    anchor: ['end',   'middle']}),
        s1_4:      inst(    {fg: mopt['r1'].fg,    anchor: ['start', 'top']}),
        s1_5:      station( {fg: mopt['r1'].fg,    anchor: ['end',   'middle']}),
        s1_6:      station( {fg: mopt['r1'].fg,    anchor: ['start', 'top']}),
        s1_7:      station( {fg: mopt['r1'].fg}),
        s1_8:      station( {fg: mopt['r1'].fg,    anchor: ['start', 'bottom']}),
        s2:        station( {fg: mopt['r2'].fg,    anchor: ['start', 'middle']}),
        s2_1:      station( {fg: mopt['r2'].fg}),
        s2_2:      inst(    {fg: mopt['r2'].fg,    anchor: ['end',   'middle']}),
        s2_3:      inst(    {fg: mopt['r2'].fg}),
        s2_4:      station( {fg: mopt['r2'].fg,    anchor: ['end',   'middle']}),
        s2_6:      station( {fg: mopt['r2'].fg,    anchor: ['start', 'top']}),
        s2_7:      inst(    {fg: mopt['r2'].fg,    anchor: ['end',   'top']}),
        s3:        station( {fg: mopt['r3'].fg,    anchor: ['start', 'middle']}),
        s3_1:      station( {fg: mopt['r3'].fg,    anchor: ['end',   'middle']}),
        s3_3:      inst(    {fg: mopt['r3'].fg,    anchor: ['end',   'bottom']}),
        s3_4:      inst(    {fg: mopt['r3'].fg,    anchor: ['start', 'top']}),
        s3_5:      inst(    {fg: mopt['r3'].fg,    anchor: ['end',   'top']}),
        s3_7:      inst(    {fg: mopt['r3'].fg,    anchor: ['end']}),
        s4:        station( {fg: mopt['r4'].fg,    anchor: ['start', 'middle']}),
        s4_1:      station( {fg: mopt['r4'].fg,    anchor: ['end',   'middle']}),
        s4_2:      inst(    {fg: mopt['r4'].fg,    anchor: ['end',   'middle']}),
        s4_3:      station( {fg: mopt['r4'].fg,    anchor: ['start', 'bottom']}),
        s4_5:      inst_d(  {fg: mopt['r4'].fg}),
        s4_6:      station( {fg: mopt['r4'].fg,    anchor: ['middle','bottom']}),
        s4_7:      station( {fg: mopt['r4'].fg,    anchor: ['end',   'top']}),
        s4A:       station( {fg: mopt['r4A'].fg,   anchor: ['start', 'middle']}),
        s4A_1:     inst(    {fg: mopt['r4A'].fg,   anchor: ['start', 'bottom']}),
        s4A_2:     inst(    {fg: mopt['r4A'].fg,   anchor: ['end',   'middle']}),
        s5:        inst(    {fg: mopt['r5'].fg}),
        s5_1:      inst(    {fg: mopt['r5'].fg,    anchor: ['end',   'bottom']}),
        s5_2:      inst(    {fg: mopt['r5'].fg,    anchor: ['start', 'middle']}),
        s5_3:      inst(    {fg: mopt['r5'].fg,    anchor: ['start', 'bottom']}),
        s6:        station( {fg: mopt['r6'].fg,    anchor: ['start', 'middle']}),
        s6_1:      station( {fg: mopt['r6'].fg,    anchor: ['end',   'middle']}),
        s6_2:      inst(    {fg: mopt['r6'].fg}),
        s6_3:      inst(    {fg: mopt['r6'].fg,    anchor: ['end',   'bottom']}),
        s6_4:      inst(    {fg: mopt['r6'].fg,    anchor: ['start', 'top']}),
        s6_5:      inst(    {fg: mopt['r6'].fg,    anchor: ['end',   'middle']}),
        s6_6:      station( {fg: mopt['r6'].fg}),
        s6_7:      inst(    {fg: mopt['r6'].fg,    anchor: ['start', 'bottom']}),
        s7:        station( {fg: mopt['r7'].fg,    anchor: ['end',   'middle']}),
        s7_1:      inst(    {fg: mopt['r7'].fg,    anchor: ['end',   'middle']}),
        s7_2:      inst(    {fg: mopt['r7'].fg,    anchor: ['start', 'bottom']}),
        s7_3:      inst(    {fg: mopt['r7'].fg,    anchor: ['start', 'top']}),
        s7_4:      station( {fg: mopt['r7'].fg,    anchor: ['start', 'bottom']}),
        s7_5:      inst_d(  {fg: mopt['r7'].fg}),
        s7_6:      station( {fg: mopt['r7'].fg}),
        s7_7:      station( {fg: mopt['r7'].fg,    anchor: ['middle','bottom']}),
        s7_8:      station( {fg: mopt['r7'].fg,    anchor: ['end',   'top']}),
        s7_9:      station( {fg: mopt['r7'].fg}),
        s7_10:     inst(    {fg: mopt['r7'].fg}),
        s7_11:     inst(    {fg: mopt['r7'].fg,    anchor: ['end',   'bottom']}),
        s8:        station( {fg: mopt['r8'].fg,    anchor: ['start', 'middle']}),
        s8_1:      inst(    {fg: mopt['r8'].fg,    anchor: ['start', 'middle']}),
        s8_2:      inst(    {fg: mopt['r8'].fg,    anchor: ['start', 'top']}),
        s8_3:      inst(    {fg: mopt['r8'].fg,    anchor: ['start', 'bottom']}),
        s8_4:      inst(    {fg: mopt['r8'].fg,    anchor: ['end',   'middle']}),
        s8_5:      inst(    {fg: mopt['r8'].fg,    anchor: ['end',   'bottom']}),
        s8_6:      inst_d(  {fg: mopt['r8'].fg}),
        s9:        station( {fg: mopt['r9'].fg,    anchor: ['start', 'middle']}),
        s9_1:      inst(    {fg: mopt['r9'].fg,    anchor: ['end',   'middle']}),
        s9_2:      inst(    {fg: mopt['r9'].fg,    anchor: ['start', 'middle']}),
        s9_3:      inst(    {fg: mopt['r9'].fg,    anchor: ['start', 'top']}),
        s9_4:      station( {fg: mopt['r9'].fg,    anchor: ['end',   'middle']}),
        s9_5:      inst(    {fg: mopt['r9'].fg,    anchor: ['start', 'bottom']}),
        s9_6:      inst(    {fg: mopt['r9'].fg,    anchor: ['end',   'bottom']}),
        s10:       station( {fg: mopt['r10'].fg,   anchor: ['end',   'middle']}),
        s10_1:     station( {fg: mopt['r10'].fg,   anchor: ['start', 'middle']}),
        s10_2:     inst(    {fg: mopt['r10'].fg,   anchor: ['start', 'middle']}),
        s10_3:     inst(    {fg: mopt['r10'].fg,   anchor: ['middle','top']}),
        s10_4:     inst_d(  {fg: mopt['r10'].fg}),
        s10_5:     station( {fg: mopt['r10'].fg,   anchor: ['end',   'top']}),
        s10_6:     inst(    {fg: mopt['r10'].fg}),
        s11:       station( {fg: mopt['r11'].fg,   anchor: ['start', 'top']}),
        s11_1:     station( {fg: mopt['r11'].fg,   anchor: ['start', 'middle']}),
        s11_2:     station( {fg: mopt['r11'].fg,   anchor: ['end',   'middle']}),
        s11_3:     inst(    {fg: mopt['r11'].fg}),
        s11_4:     inst(    {fg: mopt['r11'].fg,   anchor: ['start', 'bottom']}),
        s11_5:     inst_d(  {fg: mopt['r11'].fg}),
        s11_6:     station( {fg: mopt['r11'].fg,   anchor: ['middle','bottom']}),
        s11_7:     inst(    {fg: mopt['r11'].fg,   anchor: ['start', 'middle']}),
        s11_8:     station( {fg: mopt['r11'].fg,   anchor: ['end',   'bottom']}),
        s11_9:     inst(    {fg: mopt['r11'].fg,   anchor: ['end',   'middle']}),
        s11_10:    station( {fg: mopt['r11'].fg,   anchor: ['start', 'bottom']}),
        s11_11:    inst(    {fg: mopt['r11'].fg,   anchor: ['start', 'top']}),
        s11_12:    inst(    {fg: mopt['r11'].fg,   anchor: ['end',   'top']}),
        s11_13:    inst(    {fg: mopt['r11'].fg,   anchor: ['end',   'top']}),
        s11_14:    inst(    {fg: mopt['r11'].fg,   anchor: ['middle','bottom']}),
        s11_15:    station( {fg: mopt['r11'].fg,   anchor: ['middle','top']}),
        s11A:      inst_d(  {fg: mopt['r11A'].fg}),
        s11A_1:    station( {fg: mopt['r11A'].fg,  anchor: ['end',   'bottom']}),
        s11A_2:    inst(    {fg: mopt['r11A'].fg,  anchor: ['end',   'middle']}),
        s12:       station( {fg: mopt['r12'].fg,   anchor: ['middle','bottom']}),
        s12_1:     station( {fg: mopt['r12'].fg,   anchor: ['middle','top']}),
        s12_2:     station( {fg: mopt['r12'].fg,   anchor: ['start', 'top']}),
        s12_3:     inst(    {fg: mopt['r12'].fg}),
        s12_4:     station( {fg: mopt['r12'].fg,   anchor: ['end',   'top']}),
        s12_5:     inst(    {fg: mopt['r12'].fg,   anchor: ['start', 'middle']}),
        s13:       inst(    {fg: mopt['r13'].fg,   anchor: ['middle','top'], size: 2}),
        s13_1:     inst(    {fg: mopt['r13'].fg,   anchor: ['start', 'middle'], size: 2}),
        s14:       st_mck(  {fg: mopt['r14'].fg,   anchor: ['start', 'middle']}),
        s14_1:     st_mck(  {fg: mopt['r14'].fg,   anchor: ['start', 'top']}),
        s14_2:     st_mck(  {fg: mopt['r14'].fg,   anchor: ['end',   'middle']}),
        s14_3:     st_mck(  {fg: mopt['r14'].fg,   anchor: ['end',   'bottom']}),
        s14_4:     st_mck(  {fg: mopt['r14'].fg,   anchor: ['start', 'bottom']}),
        s14_5:     inst_mck({fg: mopt['r14'].fg}),
        s14_6:     inst_mck({fg: mopt['r14'].fg,   anchor: ['start', 'top']}),
        s14_7:     inst_mck({fg: mopt['r14'].fg,   anchor: ['end',   'middle']}),
        s14_8:     inst_mck({fg: mopt['r14'].fg,   anchor: ['middle','bottom']}),
        s14_9:     inst_mck({fg: mopt['r14'].fg,   anchor: ['start', 'bottom']}),
        s15:       station( {fg: mopt['r15'].fg,   anchor: ['start', 'middle']}),
        s15_1:     station( {fg: mopt['r15'].fg,   anchor: ['end',   'middle']}),
        s15_2:     inst(    {fg: mopt['r15'].fg,   anchor: ['start', 'middle']}),
        s15_3:     inst_d(  {fg: mopt['r15'].fg,   anchor: ['start', 'middle']}),
        s16:       station( {fg: mopt['r16'].fg,   anchor: ['start', 'middle']}),
        s16_1:     inst(    {fg: mopt['r16'].fg,   anchor: ['start', 'top']}),
        s16_2:     inst_d(  {fg: mopt['r16'].fg,   anchor: ['start', 'top']}),
        smcd1:     st_mcd(  {fg: mopt['rmcd1'].fg, anchor: ['start', 'middle']}),
        smcd1_1:   inst_mcd({fg: mopt['rmcd1'].fg}),
        smcd2:     st_mcd(  {fg: mopt['rmcd2'].fg, anchor: ['start', 'middle']}),
        smcd2_1:   inst_mcd({fg: mopt['rmcd2'].fg}),
        smcd3:     st_mcd(  {fg: mopt['rmcd3'].fg, anchor: ['start', 'middle']}),
        smcd3_1:   inst_mcd({fg: mopt['rmcd3'].fg})
    });
    // draw routes
    MLNS.map(function(line){
        var ftype = line[0], abbr = line[1], coords = line[2];
        var pts = DC.interpolateCoords(coords, true),
            path = ('M ' + pts).replace(/,/g, ' ');
        var route = DC.append('path', {
            id: ftype + '_' + abbr, d: path,
            class: mopt[ftype].class, mclass: ftype,
            fill: mopt[ftype].bg, stroke: mopt[ftype].fg,
            'stroke-dasharray': mopt[ftype].dash,
            'stroke-linejoin': mopt[ftype].join,
            'stroke-linecap': mopt[ftype].cap,
            'stroke-width': mds(mopt[ftype].width)
        });
        // interchange double line
        if(mopt[ftype +'_d']){
            DC.append('path', {
                id: ftype + '_' + abbr + '_d', d: path,
                class: mopt[ftype + '_d'].class, mclass: ftype,
                fill: 'none', stroke: mopt[ftype +'_d'].fg,
                'stroke-dasharray': mopt[ftype +'_d'].dash,
                'stroke-linejoin': mopt[ftype +'_d'].join,
                'stroke-linecap': mopt[ftype +'_d'].cap,
                'stroke-width': mds(mopt[ftype +'_d'].width)
            });
        }
        DC.extend(route, {
            onmousemove: function(){
                // find lines by type
                var rtype = this.getAttribute('mclass').slice(1);
                var lns = [], lnsattr =[];
                var pref = ['', '_ext'], suf = ['', '_1', '_2'];
                for(var i=0; i<pref.length; i++){
                    for(var ii=0; ii<suf.length; ii++) {
                        var line = document.getElementById('r'+rtype+pref[i]+'_'+'r'+rtype+suf[ii]);
                        if(line){ // highlight line
                            lns.push( {target: line} );
                            lnsattr.push( {'stroke-width': mds(12)} );
                        }
                    }
                }
                DC.doMap(lns, lnsattr);
            }
        });
    });
    // draw stations
    MSTS.map(function(station){
        var ftype = station[0], abbr = station[1], coords = station[2][0], label = station[3],
            pts = DC.toPoints(coords, true);
        var station = DC.append('circle', {
            id: ftype +'_'+ abbr, class: mopt[ftype].class, mclass: ftype,
            fill: mopt[ftype].bg, stroke: mopt[ftype].fg, 'stroke-width': mds(mopt[ftype].width),
            cx: pts[0], cy: pts[1], r: mds(mopt[ftype].size)
        });
        DC.extend(station, {
            onclick: function(){
                DC.attr(this, {class: 'selected', fill: 'gold'});
                find('.selected').map(function(a,i,all){
                    if(all.length == 2 && i>0){
                        calcRoute(all[i-1].getAttribute('id'), all[i].getAttribute('id'));
                    };
                });
            },
            onmousemove: function(){
                // find text by id
                var text = document.getElementById('t'+this.getAttribute('id'));
                var ts = [], tsattr =[];
                if(text){
                    ts.push( {target: text} );
                    tsattr.push( {'font-size': DC.root.getAttribute('width')/80} );
                    console.log(text.textContent)
                }
                // highlight station(ev) + label
                DC.doMap([{target: this}].concat(ts), [{r: mds(8)}].concat(tsattr));
            }
        });
        if(!label) return;
        // text anchor
        var a, dx = 10, dy = 0;
        if(a = mopt[ftype].anchor) {
            if(a[0] == 'start')    dx = 8;
            else if(a[0] == 'middle') dx = -5;
            else if(a[0] == 'end') dx = -10;
            if(a[1] == 'top') dy = 16;
            else if(a[1] == 'middle') dy = 4;
            else if(a[1] == 'bottom') dy = -8;
        };
        var text = DC.append('text', {
            id: 't'+ ftype +'_'+ abbr, class: mopt[ftype].class,
            x: pts[0] + mds(dx), y: pts[1] + mds(dy), fill: mopt[ftype].labelcolor || 'black',
            'font-family': 'sans-serif', 'font-size': DC.root.getAttribute('width')/125,
            'text-anchor': a ? a[0] : '', cursor: 'pointer'
        });
        text.appendChild(document.createTextNode(label));
        DC.extend(text, {
            onclick: function(){
                var station = document.getElementById(text.getAttribute('id').slice(1));
                text.setAttribute('font-size', DC.root.getAttribute('width')/125);
                station.onclick({target: station});
            },
            onmousemove: function(){
                var ts = [], tsattr =[];
                ts.push( {target: text} );
                tsattr.push( {'font-size': DC.root.getAttribute('width')/80} );
                // highlight station(ev) + label
                DC.doMap(ts, tsattr);
            }
        });
    });
    // draw other labels
    MLBS.map(function(label){
        var ftype = label[0], t = label[3], coords = label[4],
            a, dx = 10, dy = 0;
        var pts = DC.toPoints(coords, true);
        if(a = mopt[ftype].anchor) {
            if(a[0] == 'start') dx = 10;
            else if(a[0] == 'middle') dx = -5;
            else if(a[0] == 'end') dx = -10;
            if(a[1] == 'top') dy = 14;
            else if(a[1] == 'middle') dy = 4;
            else if(a[1] == 'bottom') dy = -8;
        };
        var text = DC.append('text', {
            x: pts[0] + mds(dx), y: pts[1] + mds(dy), class: mopt[ftype].class, fill: mopt[ftype].labelcolor || '',
            'font-family': 'sans-serif', 'font-size': DC.root.getAttribute('width')/125,
            'text-anchor': a ? a[0] : ''
        });
        if('rotate' in mopt[ftype]){
            DC.attr(text, {
                transform: 'rotate(' + mopt[ftype].rotate + ',' + pts[0] + ',' + pts[1] + ')'
            });
        }
        text.appendChild(document.createTextNode(t));
    });
//  DC.scaleCarta(0.8);
};
//
function clearRoute(){
    find('.selpath').map(function(o){ DC.vp.removeChild(o); });
    find('.selected').map(function(o){
        var m = o.getAttribute('mclass');
        DC.attr(o, {class: mopt[m].class, fill: mopt[m].bg, r: mds(mopt[m].size), 'stroke-width': mds(mopt[m].width)});
    });
    find('.route, .station, .label').map(function(o){ DC.attr(o, {opacity: '1'}); });
}
//
function calcRoute(fromid, toid){
    console.log(fromid, toid);
    var inches=[];
    [].slice.call(document.getElementById('cInches').options).map(function(o){
        if(o.innerHTML.indexOf('\u2611')>-1){ // checked
            inches = inches.concat(makecrds(MLNS.filter(function(a){ return a[0]==o.id; })));
        }
    });
    var pinches=[], proutes=[];
    BFS(MSTS, inches, makeind(MSTS, fromid), makeind(MSTS, toid),
        [ // stop stations
            makeind(MSTS, 's5_Suvorovskaya'),
            makeind(MSTS, 's5_3_Rossyskaya'),
            makeind(MSTS, 's8_3_Dorogomilovskaya'),
            makeind(MSTS, 's8_4_Plyushchikha'),
            makeind(MSTS, 's8_1_Volkhonka')
        ]).map(function(st,i,sts)
    {
        if(i < sts.length-1){
            var cc=[], d=sts[i][2][0], e=sts[i+1][2][0], r0, r1, rr;
            MLNS.map(function(b){
                if((maketipn(b) == maketipn(sts[i])) && (maketipn(b) == maketipn(sts[i+1]))){
                    b[2].map(function(c,j){ // find coords between stations
                        r0 = Math.sqrt(Math.pow(d[0]-c[0],2)+Math.pow(d[1]-c[1],2));
                        r1 = Math.sqrt(Math.pow(e[0]-c[0],2)+Math.pow(e[1]-c[1],2));
                        rr = Math.sqrt(Math.pow(d[0]-e[0],2)+Math.pow(d[1]-e[1],2));
                        if((r0 <= rr) && (r1 <= rr)){
                            if(!inarray(cc,c)) cc.push(c);
                        }
                    });
                }
            });
            if(cc.length<3) cc = cc.map(function(a){ return a.slice(0,2); }); //remove Q flag bezier without L
            if(cc.length &&   //rotate first with last if indirect
                (Math.sqrt(Math.pow(d[0]-cc[0][0],2)+Math.pow(d[1]-cc[0][1],2)))>=
                (Math.sqrt(Math.pow(d[0]-cc[cc.length-1][0],2)+Math.pow(d[1]-cc[cc.length-1][1],2))))
            {
                if(!inarray(cc,e)) cc.unshift(e);
                if(!inarray(cc,d)) cc.push(d);
            } else {
                if(!inarray(cc,d)) cc.unshift(d);
                if(!inarray(cc,e)) cc.push(e);
            }
            var pts = DC.interpolateCoords(cc, true),
                path = ('M ' + pts).replace(/,/g, ' ');
            if (inches.filter(function(m){ return (inarray(m,d) && inarray(m,e)); }).length) {
                pinches.push( {path: path, st: st} );  // inches paths
            } else {
                proutes.push ( {path: path, st: st} ); // routes paths
            }
        } else {
            find('.route, .station, .label').map(function(o){ DC.attr(o, {opacity: '0.07'}); });
            proutes.map(function(m){ // routes
                DC.append('path', { class: 'selpath', d: m.path, stroke: DC.root.getElementById(makeid(m.st)).getAttribute('stroke'), fill: 'none', 'stroke-linejoin': 'round', 'stroke-linecap': 'round', 'stroke-width': mds(8)});
            });
            pinches.map(function(m){ // interchanges above route
                DC.append('path', { class: 'selpath', d: m.path, stroke: '#fafffa', fill: 'none', 'stroke-linejoin': 'round', 'stroke-linecap': 'round', 'stroke-width': mds(4)});
                DC.append('path', { class: 'selpath', d: m.path, stroke: DC.root.getElementById(makeid(m.st)).getAttribute('stroke'), fill: 'none', 'stroke-linejoin': 'round', 'stroke-linecap': 'round', 'stroke-width': mds(2)});
            });
            sts.map(function(st){ // station + label above route
                var ost = DC.root.getElementById(makeid(st));
                var t = DC.root.getElementById('t' + ost.getAttribute('id'));
                DC.append('circle', {class: 'selpath', stroke: ost.getAttribute('stroke'), cx: ost.getAttribute('cx'), cy: ost.getAttribute('cy'), fill: '#f5f5dc', 'stroke-width': mds(2), r: mds(4)});
                if(t){
                    DC.append('text', {
                        x: t.getAttribute('x'), y: t.getAttribute('y'),
                        class: 'selpath',  fill: t.getAttribute('fill'),
                        'font-family': 'sans-serif', 'font-size': DC.root.getAttribute('width')/125,
                        'text-anchor': t.getAttribute('text-anchor')
                    }).innerHTML = t.innerHTML;
                }
            });
        }
    }).length || clearRoute();
}
// reklama size
function Ya_Rtb1_Height(){
    return window.yaContextCb ? 60:0;
}
//
document.getElementById('yandex_rtb_R-A-2277013-1').style.height = Ya_Rtb1_Height() + 'px';
//
var DC = new dbCartaSvg({
    id: 'mcont',
    height: document.getElementById('mcont').offsetHeight-Ya_Rtb1_Height(),
    bg: 'rgb(250,255,250)',
    sbar: 0
//  sbarpos: 'right',
//  scalebg: 'rgba(100,200,100,0.3)'
});
// events
DC.extend(DC.root, {
    ondblclick: function(){ clearRoute(); }
});

draw();

